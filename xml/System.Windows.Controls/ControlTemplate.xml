<Type Name="ControlTemplate" FullName="System.Windows.Controls.ControlTemplate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="295eb3e206af0ec828c568e6d86ec8ea6a118d4b" /><Meta Name="ms.sourcegitcommit" Value="0de246131f8a87c71d008d055adec7bf72470c4f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="05/29/2019" /><Meta Name="ms.locfileid" Value="66302052" /></Metadata><TypeSignature Language="C#" Value="public class ControlTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ControlTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type ControlTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定 <see cref="T:System.Windows.Controls.Control" /> 的視覺化結構和行為層面，其可透過控制項的多重執行個體 (Instance) 來共用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ControlTemplate>可讓您指定控制項的視覺化結構。 控制項作者可以定義預設值<xref:System.Windows.Controls.ControlTemplate>應用程式作者可以覆寫<xref:System.Windows.Controls.ControlTemplate>來重新建構控制項的視覺化結構。  
  
 控制樣板化是所提供的許多功能的其中一個[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]樣式和範本化模型。 樣式和範本化模型為您提供這類很大的彈性，在許多情況下您不需要撰寫自己的控制項。 如果您想要變更控制項的視覺效果，或取代應用程式作者<xref:System.Windows.Controls.ControlTemplate>的現有控制項，請參閱[樣式和範本化](~/docs/framework/wpf/controls/styling-and-templating.md)取得相關範例和深入的討論的主題。  
  
 如果您正在撰寫自己的控制項，請參閱 「 建立自訂控制項 」 中[控制項撰寫概觀](~/docs/framework/wpf/controls/control-authoring-overview.md)。  
  
 A<xref:System.Windows.Controls.ControlTemplate>將不會察覺到外部使用者和物件，包括樣式的實作詳細資料的自主的單位。 管理控制項範本的內容的唯一方式是從相同的控制項範本。  
  
<a name="xamlObjectElementUsage_VisualTree"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
```xaml
<ControlTemplate>  
  <VisualTreeRootNode>
    VisualTreeNodeContents  
  </VisualTreeRootNode>  
</ControlTemplate>  
```  
  
<a name="xamlValues_VisualTree"></a>   
## <a name="xaml-values"></a>XAML 值  
 *ControlTemplate*  
 物件項目<xref:System.Windows.Controls.ControlTemplate>或衍生的類別。  
  
 *VisualTreeRootNode*  
 單一[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]作為當前子系的項目<xref:System.Windows.Controls.ControlTemplate>（或衍生的類別）。 範本必須有單一根節點。 若要產生有用的範本，為選擇的項目*VisualTreeRootNode*預期支援內容的模型，通常可支援多個子項目的模型。  
  
 *VisualTreeNodeContents*  
 完成所預期的範本的一或多個元素。 如果選擇做為項目*VisualTreeRootNode*僅支援單一子系，然後那里可以只有一個項目宣告為*VisualTreeNodeContents*。 此外，也可以 （但不常見），提供文字內容，如果所選*VisualTreeRootNode*支援的文字內容的屬性。  
  
   
  
## Examples  
 下列所示<xref:System.Windows.Controls.Button><xref:System.Windows.Style>如此<xref:System.Windows.Controls.ControlTemplate>的<xref:System.Windows.Controls.Button>:  
  
 [!code-xaml[StylingIntroSample_snippet#ButtonCT](~/samples/snippets/csharp/VS_Snippets_Wpf/StylingIntroSample_snippet/CSharp/Window1.xaml#buttonct)]     
  
 這會套用，當<xref:System.Windows.Controls.Button>會顯示為<xref:System.Windows.Shapes.Ellipse>:  
  
 ![Button ControlTemplate 範例](~/add/media/stylingintro-buttoncontroltemplate.png "Button ControlTemplate 範例")  
  
 當您設定<xref:System.Windows.Controls.Control.Template%2A>的屬性<xref:System.Windows.Controls.Control>新<xref:System.Windows.Controls.ControlTemplate>如同上述範例中，您要取代整個範本。 什麼<xref:System.Windows.Controls.Button>時它會在成為焦點或按下的預設按鈕的外觀，您要取代的所有組件的外觀。 因此，根據您的需求，您可能想要放入您的按鈕應該看起來像它按下時，您定義和等等，如下列範例所示：  
  
 [!code-xaml[ControlTemplateExamples#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/button.xaml#1)]  
  
 請注意，此範例會參考不會顯示在這裡的資源。 如需完整的範例，請參閱[使用 ControlTemplate 設定樣式範例](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating)。 該範例提供的許多控制項的控制項範本的範例，並會為您開始建立控制項範本的最佳方式。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Style" />
    <altmember cref="T:System.Windows.DataTemplate" />
    <altmember cref="T:System.Windows.Controls.ContentPresenter" />
    <altmember cref="T:System.Windows.Controls.ItemsPresenter" />
    <altmember cref="T:System.Windows.TemplateBindingExtension" />
    <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">樣式設定和範本化範例簡介</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.ControlTemplate" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.ControlTemplate" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate(Type ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ControlTemplate : Type -&gt; System.Windows.Controls.ControlTemplate" Usage="new System.Windows.Controls.ControlTemplate targetType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">這個樣板適用於該型別。</param>
        <summary>使用指定的目標型別來初始化 <see cref="T:System.Windows.Controls.ControlTemplate" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : Type with get, set" Usage="System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>為預期為 <see cref="T:System.Windows.Controls.ControlTemplate" /> 的項目取得或設定類型。</summary>
        <value>預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您有獨立<xref:System.Windows.Controls.ControlTemplate>的資源區段中<xref:System.Windows.Controls.ControlTemplate.TargetType%2A>屬性設為型別，<xref:System.Windows.Controls.ControlTemplate>不會不會套用到該類型會自動。 相反地，您必須指定`x:Key`並明確地套用的範本。  
  
 也請注意，<xref:System.Windows.Controls.ControlTemplate.TargetType%2A>上需要屬性<xref:System.Windows.Controls.ControlTemplate>如果範本定義包含<xref:System.Windows.Controls.ContentPresenter>。  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a>XAML 值  
 *typeName*  
 類別的型別名稱。 若要指向<xref:System.Type>的類別，使用名稱[標記延伸和 WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)。  
  
   
  
## Examples  
 下列範例示範如何使用這個屬性：  
  
 [!code-xaml[ControlTemplateExamples#Label](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/label.xaml#label)]  
  
 上述範例會使用下列資源：  
  
  
  
 如需完整的範例，請參閱[使用 ControlTemplate 設定樣式範例](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">如果樣板的定義具有 <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" />，<see cref="T:System.Windows.Controls.ContentPresenter" /> 屬性便不得為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">所指定的型別無效。 <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> 的 <see cref="T:System.Windows.Controls.ControlTemplate" />，必須是 (或必須繼承自) <see cref="T:System.Windows.Controls.Control" />、<see cref="T:System.Windows.Controls.Page" /> 或 <see cref="T:System.Windows.Navigation.PageFunctionBase" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Windows.TriggerBase" /> 物件的集合，其會根據指定的條件套用屬性變更，或執行動作。</summary>
        <value><see cref="T:System.Windows.TriggerBase" /> 物件的集合。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>XAML 值  
 *oneOrMoreTriggers*  
 一或多個<xref:System.Windows.TriggerBase>物件 (這些是通常<xref:System.Windows.Trigger>)。  
  
   
  
## Examples  
 下列範例示範如何使用這個屬性：  
  
 [!code-xaml[ControlTemplateExamples#ToolTip](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/tooltip.xaml#tooltip)]  
  
 上述範例會使用下列資源：  
  
  
  
  
 如需完整的範例，請參閱[使用 ControlTemplate 設定樣式範例](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating)。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">樣式設定和範本化範例簡介</related>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="controlTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">這個樣板要套用的項目。</param>
        <summary>請依一組規則來檢查樣版化父代 (Parent)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法會使用下列規則：  
  
 1. `templatedParent`不能屬於類型<xref:System.Windows.FrameworkContentElement>。  
  
 2. `templatedParent`不能屬於類型<xref:System.Windows.FrameworkElement>不是<xref:System.Windows.Controls.Control>。  
  
 3. `templatedParent`不可<xref:System.Windows.Controls.Control>不是與相關聯<xref:System.Windows.Controls.ControlTemplate>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="templatedParent" /> 不得為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">在使用 <see cref="T:System.Windows.Controls.ControlTemplate" /> 上的 <see cref="T:System.Windows.Controls.Control" /> 之前，您必須藉由設定 <see cref="P:System.Windows.Controls.Control.Template" /> 屬性，使 <see cref="T:System.Windows.Controls.ControlTemplate" /> 與 <see cref="T:System.Windows.Controls.Control" /> 相關聯。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
