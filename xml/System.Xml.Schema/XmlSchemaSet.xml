<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="95c84a65dda349c44d2625e4bd881d75ecddf107" /><Meta Name="ms.sourcegitcommit" Value="0de246131f8a87c71d008d055adec7bf72470c4f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="05/29/2019" /><Meta Name="ms.locfileid" Value="66301816" /></Metadata><TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaSet" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaSet" />
  <TypeSignature Language="F#" Value="type XmlSchemaSet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含 XML 結構描述定義語言 (XSD) 結構描述的快取。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   請勿使用從未知或未受信任的來源或位置的結構描述。 如此一來會危及您的程式碼的安全性。  
> -   XML 結構描述 （包括內嵌結構描述） 是本質上容易遭到阻絕服務攻擊;不接受這些未受信任的案例中。  
> -   結構描述驗證錯誤訊息和例外狀況可能會公開機密資訊的內容模型或結構描述檔案的 URI 路徑。 請小心，不要公開 （expose） 給未受信任的呼叫端的這項資訊。  
> -   其他安全性考量事項涵蓋在 < 安全性考量 > 一節。  
  
 <xref:System.Xml.Schema.XmlSchemaSet> 快取或程式庫，您可以在其中儲存的 XML 結構描述定義語言 (XSD) 結構描述。 <xref:System.Xml.Schema.XmlSchemaSet> 會藉由在記憶體中快取結構描述，而不是從檔案或 URL 來存取它們，來增加效能。 每個結構描述由命名空間 URI，且位置為可讓您指定結構描述加入至集合時。 您使用<xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=nameWithType>屬性來指派<xref:System.Xml.Schema.XmlSchemaSet>物件的 XML 讀取器應該用來驗證資料。  
  
## <a name="security-considerations"></a>安全性考量  
  
-   請勿使用來源不明或不受信任來源的結構描述。 如此一來會危及您的程式碼的安全性。 外部命名空間或位置中參考包含，匯入和重新定義結構描述項目的解決相關的結構描述併入或匯入它們的基底 URI。 例如，如果併入或匯入結構描述的基底 URI 是空的或`null`，外部的位置會相對於目前的目錄解析。 <xref:System.Xml.XmlUrlResolver>類別預設用來解析外部結構描述。 若要停用解析的 include，匯入，並重新定義結構描述的項目，設定<xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType>屬性設`null`。  
  
-   <xref:System.Xml.Schema.XmlSchemaSet>類別會使用<xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType>類別來剖析和比對規則運算式中的 XML 結構描述。 使用 XML 結構描述中的規則運算式的模式 facet 的驗證可能會增加的 CPU 使用量和高可用性案例中應避免使用。  
  
-   使用所引發的例外狀況<xref:System.Xml.Schema.XmlSchemaSet>類別，例如<xref:System.Xml.Schema.XmlSchemaException>類別可能包含不應公開受信任的案例中的機密資訊。 例如，<xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>屬性<xref:System.Xml.Schema.XmlSchemaException>傳回至造成例外狀況的結構描述檔案的 URI 路徑。 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>屬性不應公開受信任的案例中。 使機密資訊不會暴露在不受信任的情況下，就應該正確處理例外狀況。  
  
   
  
## Examples  
 下列範例會使用儲存在 <xref:System.Xml.Schema.XmlSchemaSet> 中的結構描述，來驗證 XML 檔案。 XML 檔案中的命名空間 (`urn:bookstore-schema`)，會識別 <xref:System.Xml.Schema.XmlSchemaSet> 中用於驗證的結構描述。 範例輸出所顯示的 XML 檔有兩個結構描述違規：

 - 第一個\<書籍 > 項目包含\<作者 > 項目，但沒有\<標題 > 或\<價格 > 項目。

 - \<作者 > 中最後一個項目\<活頁簿 > 遺漏項目\<名字 > 並\<-n > 項目並改為具有無效的\<名稱 > 項目。   
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## <a name="input"></a>輸入  
 範例會使用下列兩個輸入檔案。  
  
 **booksSchemaFail.xml:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **books.xsd:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet(System::Xml::XmlNameTable ^ nameTable);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaSet : System.Xml.XmlNameTable -&gt; System.Xml.Schema.XmlSchemaSet" Usage="new System.Xml.Schema.XmlSchemaSet nameTable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">要使用的 <see cref="T:System.Xml.XmlNameTable" /> 物件。</param>
        <summary>使用指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">做為參數傳遞的 <see cref="T:System.Xml.XmlNameTable" /> 物件為 <see langword="null" />。</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定的 XML 結構描述定義語言 (XSD) 結構描述加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">要加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件。</param>
        <summary>將指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" /> 物件 (如果結構描述有效)。 如果結構描述無效，且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，則會傳回 <see langword="null" />，並會引發適當的驗證事件。 否則會擲回 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Xml.Schema.XmlSchema>物件已經存在於<xref:System.Xml.Schema.XmlSchemaSet>，則<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法不做任何動作。  
  
 此方法的功能等同於<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">此結構描述無效。</exception>
        <exception cref="T:System.ArgumentNullException">做為參數傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xmlSchemaSet.Add schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</param>
        <summary>將指定 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的所有 XML 結構描述定義語言 (XSD) 結構描述加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 結構描述可以新增至之前<xref:System.Xml.Schema.XmlSchemaSet>，它必須成功地前置處理。 前置處理，就會執行下列基本工作。  
  
1.  結構化的有效性，根據 W3C XML 結構描述，規則會檢查結構描述，但不是完全驗證的結構描述。  
  
2.  內部和外部結構描述元件的參考會解析。 已成功擷取任何匯入或包含結構描述也會新增至<xref:System.Xml.Schema.XmlSchemaSet>。 匯入結構描述會新增為個別<xref:System.Xml.Schema.XmlSchema>物件和包含的結構描述進行的部分包括<xref:System.Xml.Schema.XmlSchema>。  
  
 如果<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性<xref:System.Xml.Schema.XmlSchemaSet>若要加入`true`中, 所有結構描述<xref:System.Xml.Schema.XmlSchemaSet>將會新增至<xref:System.Xml.Schema.XmlSchemaSet>。 如果<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>的屬性<xref:System.Xml.Schema.XmlSchemaSet>若要將`false`，才能新增的每個加入的結構描述會經過前置處理。 如果有任何新加入的結構描述<xref:System.Xml.Schema.XmlSchemaSet>無法會前置處理結構描述會加入; 相反地，<xref:System.Xml.Schema.XmlSchemaException>就會擲回。 如此一來，下列兩個程式碼範例並不相同。  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 先前的兩個程式碼範例並不相同。 在第一個範例中，如果無效的結構描述存在於`schemaSet1`並將其<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性設定為`false`，沒有結構描述會新增至`schemaSet`。 在第二個範例中，結構描述數目可以新增至`schemaSet`遇到無效的結構描述，並擲回例外狀況之前。  
  
   
  
## Examples  
 下列程式碼範例說明如何將結構描述新增至<xref:System.Xml.Schema.XmlSchemaSet>，然後加入<xref:System.Xml.Schema.XmlSchemaSet>新<xref:System.Xml.Schema.XmlSchemaSet>使用<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的結構描述無效。</exception>
        <exception cref="T:System.ArgumentNullException">做為參數傳遞的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaUri As String) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::String ^ schemaUri);" />
      <MemberSignature Language="F#" Value="member this.Add : string * string -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">結構描述 <paramref name="targetNamespace" /> 屬性，如果使用結構描述中指定的 <paramref name="targetNamespace" /> 則為 <see langword="null" />。</param>
        <param name="schemaUri">指定要載入之結構描述的 URL。</param>
        <summary>將指定 URL 處的 XML 結構描述定義語言 (XSD) 結構描述加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" /> 物件 (如果結構描述有效)。 如果結構描述無效，且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，則會傳回 <see langword="null" />，並會引發適當的驗證事件。 否則會擲回 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 結構描述可以新增至之前<xref:System.Xml.Schema.XmlSchemaSet>，它必須成功地前置處理。 前置處理，就會執行下列基本工作。  
  
1.  結構化的有效性，根據 W3C XML 結構描述，規則會檢查結構描述，但不是完全驗證的結構描述。  
  
2.  內部和外部結構描述元件的參考會解析。 已成功擷取任何匯入或包含結構描述也會新增至<xref:System.Xml.Schema.XmlSchemaSet>。 匯入結構描述會新增為個別<xref:System.Xml.Schema.XmlSchema>物件和包含的結構描述進行的部分包括<xref:System.Xml.Schema.XmlSchema>。  
  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。  
  
-   新增至結構描述<xref:System.Xml.Schema.XmlSchemaSet>具有相同目標命名空間和結構描述位置 URL 做為已包含在結構描述<xref:System.Xml.Schema.XmlSchemaSet>會傳回原始的結構描述物件。  
  
-   當新的結構描述已成功新增至<xref:System.Xml.Schema.XmlSchemaSet>，則<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性<xref:System.Xml.Schema.XmlSchemaSet>設定為`false`。  
  
-   在 XML 結構描述中遇到任何包含 」 或 「 匯入項目時，都會在解析<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>呼叫方法。 若要解決失敗 include 和 import 項目產生結構描述驗證警告如果沒有<xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>尚未指定<xref:System.Xml.Schema.XmlSchemaSet>物件，這些警告將不會報告。  
  
-   如果具有相同的目標命名空間中現有的結構描述的結構描述<xref:System.Xml.Schema.XmlSchemaSet>新增至<xref:System.Xml.Schema.XmlSchemaSet>，新增兩個結構描述。  
  
    > [!NOTE]
    >  此行為不同於過時<xref:System.Xml.Schema.XmlSchemaCollection>物件。  
  
-   <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法<xref:System.Xml.Schema.XmlSchemaSet>能夠使用的目標命名空間的結構描述中定義，而不需要做為參數指定的目標命名空間時<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>呼叫方法。 指定`null`中`targetNamespace`的參數<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法會指示<xref:System.Xml.Schema.XmlSchemaSet>若要使用的結構描述中定義的目標命名空間，如下列程式碼範例所示。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 在上述程式碼範例`null`指定為`targetNamespace`參數來<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。 如此一來，`targetNamespace`定義在 books.xml 檔案會使用。 在此情況下，呼叫<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法，可與相同如果http://www.contoso.com/books有已指定為`targetNamespace`參數。  
  
-   W3C XML 結構描述可讓沒有目標命名空間包含結構描述中定義的目標命名空間與結構描述。 在此情況下，沒有目標命名空間定義的結構描述會強制轉型成包含的結構描述的目標命名空間。 包含的結構描述會被視為它已有定義該目標命名空間。 同樣地，沒有目標命名空間的結構描述可以加入<xref:System.Xml.Schema.XmlSchemaSet>強制轉型成所指定的目標命名空間和<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法，如下列範例所示。  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 如果上述的結構描述加入<xref:System.Xml.Schema.XmlSchemaSet>具有目標命名空間http://www.contoso.com/new/targetnamespace（如所示在下列程式碼中），它會被視為宣告結構描述中的目標命名空間是`http://www.contoso.com/new/targetnamespace`。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## Examples  
 下列程式碼範例會將http://www.contoso.com/books.xsd具有目標命名空間的結構描述http://www.contoso.com/books至<xref:System.Xml.Schema.XmlSchemaSet>。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 該範例使用 `books.xsd` 檔案做為輸入。  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">此結構描述無效。</exception>
        <exception cref="T:System.ArgumentNullException">以參數形式傳遞的 URL 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaDocument As XmlReader) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::Xml::XmlReader ^ schemaDocument);" />
      <MemberSignature Language="F#" Value="member this.Add : string * System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">結構描述 <paramref name="targetNamespace" /> 屬性，如果使用結構描述中指定的 <paramref name="targetNamespace" /> 則為 <see langword="null" />。</param>
        <param name="schemaDocument"><see cref="T:System.Xml.XmlReader" /> 物件。</param>
        <summary>將 <see cref="T:System.Xml.XmlReader" /> 中包含的 XML 結構描述定義語言 (XSD) 結構描述加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" /> 物件 (如果結構描述有效)。 如果結構描述無效，且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，則會傳回 <see langword="null" />，並會引發適當的驗證事件。 否則會擲回 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 結構描述可以新增至之前<xref:System.Xml.Schema.XmlSchemaSet>，它必須成功地前置處理。 前置處理，就會執行下列基本工作。  
  
1.  結構化的有效性，根據 W3C XML 結構描述，規則會檢查結構描述，但不是完全驗證的結構描述。  
  
2.  內部和外部結構描述元件的參考會解析。 已成功擷取任何匯入或包含結構描述也會新增至<xref:System.Xml.Schema.XmlSchemaSet>。 匯入結構描述會新增為個別<xref:System.Xml.Schema.XmlSchema>物件和包含的結構描述進行的部分包括<xref:System.Xml.Schema.XmlSchema>。  
  
 以下是使用時要考慮的重要注意事項<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。  
  
-   已成功擷取匯入或包含在結構描述所包含的結構描述<xref:System.Xml.XmlReader>也會新增至<xref:System.Xml.Schema.XmlSchemaSet>。  
  
-   如果<xref:System.Xml.XmlReader>並非位於根項目<xref:System.Xml.Schema.XmlSchemaException>除非目前的項目是項目，否則會擲回。 如果目前的項目`xs:schema`項目中，結構描述文件讀入<xref:System.Xml.Schema.XmlSchemaSet>; 否則即為<xref:System.Xml.Schema.XmlSchemaException>因為無效的結構描述會擲回。  
  
-   如果<xref:System.Xml.XmlReader>位於 XML 節點的序列，會加入只在序列中的第一個節點。  
  
-   如果從已建立的結構描述<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>方法呼叫、 值<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>屬性會被忽略，因為內嵌結構描述處理不會套用為 W3C XML 結構描述文件。  
  
-   <xref:System.Xml.XmlResolver>屬性<xref:System.Xml.XmlReader>不會用來解析命名空間或結構描述中的位置參考 include 和 import 項目。 相反地，<xref:System.Xml.XmlResolver>屬性<xref:System.Xml.Schema.XmlSchemaSet>用。  
  
-   <xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法<xref:System.Xml.Schema.XmlSchemaSet>能夠使用的目標命名空間的結構描述中定義，而不需要做為參數指定的目標命名空間時<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>呼叫方法。 指定`null`或是<xref:System.String.Empty?displayProperty=nameWithType>要<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法會指示<xref:System.Xml.Schema.XmlSchemaSet>使用結構描述中定義的目標命名空間。 如需此行為的範例，請參閱<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。  
  
 此方法的其餘功能完全相同的<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例會將 books.xsd 結構描述中包含<xref:System.Xml.XmlTextReader>使用的目標命名空間http://www.contoso.com/books至<xref:System.Xml.Schema.XmlSchemaSet>。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">此結構描述無效。</exception>
        <exception cref="T:System.ArgumentNullException">做為參數傳遞的 <see cref="T:System.Xml.XmlReader" /> 物件為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationSettings As XmlSchemaCompilationSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCompilationSettings ^ CompilationSettings { System::Xml::Schema::XmlSchemaCompilationSettings ^ get(); void set(System::Xml::Schema::XmlSchemaCompilationSettings ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilationSettings : System.Xml.Schema.XmlSchemaCompilationSettings with get, set" Usage="System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 預設為將 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 屬性設為 <see langword="true" /> 的 <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> 執行個體。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaCompilationSettings>類別會指定 Unique Particle Attribution (UPA) 的驗證選項<xref:System.Xml.Schema.XmlSchemaSet>。 如需啟用 UPA 驗證檢查的詳細資訊，請參閱<xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A>屬性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compile();" />
      <MemberSignature Language="F#" Value="member this.Compile : unit -&gt; unit" Usage="xmlSchemaSet.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD) 結構描述，編譯為一個邏輯結構描述。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當需要驗證時自動呼叫這個方法和<xref:System.Xml.Schema.XmlSchemaSet>尚未被先前編譯-例如，當<xref:System.Xml.Schema.XmlSchemaSet>做為輸入來建立<xref:System.Xml.XmlReader>物件<xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>屬性<xref:System.Xml.XmlReaderSettings>物件。 如果<xref:System.Xml.Schema.XmlSchemaSet>是已編譯的狀態，這個方法將不重新編譯的結構描述。 如果這個方法執行成功，<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性設定為`true`。  
  
 先前編譯的結構描述<xref:System.Xml.Schema.XmlSchemaSet>不會重新編譯。 不過，使用編譯的結構描述<xref:System.Xml.Schema.XmlSchemaSet.Compile%2A>方法的<xref:System.Xml.Schema.XmlSchema>會重新編譯。  
  
> [!NOTE]
>  您必須呼叫<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法，如果您已變更的結構描述 （或其中一個包含/匯入） 之後將它新增至, <xref:System.Xml.Schema.XmlSchemaSet>。 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法會檢查結構描述的結構化的有效性，根據 W3C XML 結構描述的規則。 不過，它不會執行完整的驗證檢查。 它也會解析內部和外部結構描述元件的參考。 已成功擷取任何匯入或包含結構描述也會新增至<xref:System.Xml.Schema.XmlSchemaSet>。 匯入結構描述會新增為個別<xref:System.Xml.Schema.XmlSchema>物件時包含結構描述進行一部分包括<xref:System.Xml.Schema.XmlSchema>。 如果重新處理呼叫成功，<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性設定為 false。  
  
   
  
## Examples  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">錯誤發生於驗證和編譯 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的結構描述時。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指出 XML 結構描述定義語言 (XSD) 結構描述是否位於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (targetNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="xmlSchemaSet.Contains targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">結構描述 <paramref name="targetNamespace" /> 屬性。</param>
        <summary>指出具有指定目標命名空間 URI 的 XML 結構描述定義語言 (XSD) 結構描述是否位於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中。</summary>
        <returns>如果具有指定的目標命名空間 URI 的結構描述位於 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 間接加入的結構描述<xref:System.Xml.Schema.XmlSchemaSet>偵測到的<xref:System.Xml.Schema.XmlSchemaSet.Contains%2A>方法; 例如，匯入結構描述。 如此一來，如果結構描述http://www.contoso.com/retail它會匯入的結構描述的命名空間http://www.contoso.com/books命名空間加入至<xref:System.Xml.Schema.XmlSchemaSet>，則呼叫<xref:System.Xml.Schema.XmlSchemaSet.Contains%2A>具有`http://www.contoso.com/books`做為參數，它會傳回`true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (schema As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.Contains schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema"><see cref="T:System.Xml.Schema.XmlSchema" /> 物件。</param>
        <summary>指出指定的 XML 結構描述定義語言 (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> 物件是否位於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中。</summary>
        <returns>如果 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">以參數形式傳遞的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (schemas As XmlSchema(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Xml::Schema::XmlSchema ^&gt; ^ schemas, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Xml.Schema.XmlSchema[] * int -&gt; unit" Usage="xmlSchemaSet.CopyTo (schemas, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">將物件複製到其中的陣列。</param>
        <param name="index">在陣列中開始複製的索引。</param>
        <summary>複製 <see cref="T:System.Xml.Schema.XmlSchema" /> 中的所有 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件至指定陣列，開始於指定的索引處。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會複製全部<xref:System.Xml.Schema.XmlSchema>中的物件<xref:System.Xml.Schema.XmlSchemaSet>陣列<xref:System.Xml.Schema.XmlSchema>物件。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的邏輯 XML 結構描述定義語言 (XSD) 結構描述數目。</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的邏輯結構描述數目。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果有兩個結構描述命名空間`http://www.contoso.com`中<xref:System.Xml.Schema.XmlSchemaSet>，則<xref:System.Xml.Schema.XmlSchemaSet.Count%2A>屬性會傳回 1，因為結構描述會被視為單一的邏輯結構描述進行驗證。 不過，如果命名空間的結構描述`http://www.contoso.com/retail`匯入的結構描述`http://www.contoso.com/books`命名空間的值<xref:System.Xml.Schema.XmlSchemaSet.Count%2A>屬性將會是 2。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalAttributes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalAttributes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAttributes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 結構描述定義語言 (XSD) 結構描述的所有全域屬性。</summary>
        <value>全域屬性的集合。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalElements As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalElements { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalElements : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 結構描述定義語言 (XSD) 結構描述的所有全域項目。</summary>
        <value>全域項目的集合。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalTypes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalTypes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalTypes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 結構描述定義語言 (XSD) 結構描述的所有全域簡單和複雜型別。</summary>
        <value>全域簡單和複雜型別的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A>屬性一律會傳回此類型代表`xs:anyType`複雜型別。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompiled : bool" Usage="System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出是否已編譯 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XML 結構描述定義語言 (XSD) 結構描述。</summary>
        <value>如果上次從 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 加入或移除結構描述之後，已編譯 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的結構描述，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果結構描述是在 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 時編輯的，則 <xref:System.Xml.Schema.XmlSchemaSet> 屬性不受影響。 也不會追蹤 <xref:System.Xml.Schema.XmlSchemaSet> 中個別結構描述的更新。 因此，即使 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 中的其中一個結構描述已變更，只要未在 `true` 中加入或移除結構描述，<xref:System.Xml.Schema.XmlSchemaSet> 屬性就可為 <xref:System.Xml.Schema.XmlSchemaSet>。  
  
   
  
## Examples  
 如需<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性，請參閱<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當載入新的 XML 結構描述定義語言 (XSD) 結構描述時，取得 <see cref="T:System.Xml.XmlNameTable" /> 所使用的預設 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
        <value>原子化字串物件的資料表。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Remove(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Remove schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">要從 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</param>
        <summary>移除 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的指定 XML 結構描述定義語言 (XSD) 結構描述。</summary>
        <returns>從 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，如果在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中找不到結構描述則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 移除從結構描述<xref:System.Xml.Schema.XmlSchemaSet>設定<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性設`false`。  
  
   
  
## Examples  
 下列範例說明新增至多個結構描述<xref:System.Xml.Schema.XmlSchemaSet>，然後移除其中一個使用的結構描述<xref:System.Xml.Schema.XmlSchemaSet.Remove%2A>方法。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">結構描述不是有效的結構描述。</exception>
        <exception cref="T:System.ArgumentNullException">以參數形式傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRecursive (schemaToRemove As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveRecursive(System::Xml::Schema::XmlSchema ^ schemaToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveRecursive : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.RemoveRecursive schemaToRemove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove">要從 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</param>
        <summary>移除 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中指定的 XML 結構描述定義語言 (XSD) 結構描述及其匯入的所有結構描述。</summary>
        <returns>如果成功移除 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件及其匯入的所有結構描述，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>方法會移除指定的結構描述及其匯入的所有結構描述<xref:System.Xml.Schema.XmlSchemaSet>，只要不有任何相依性的結構描述或其匯入的結構描述。 如果有相依性的結構描述或在其匯入結構描述<xref:System.Xml.Schema.XmlSchemaSet>，不會移除並<xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>傳回`false`。 如果`false`會傳回和<xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>是定義，會傳送警告給事件處理常式描述相依性。  
  
 如果指定的結構描述匯入的其他結構描述，而且先前已移除指定的結構描述<xref:System.Xml.Schema.XmlSchemaSet.Remove%2A>方法中，<xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>方法將不會移除匯入的結構描述，並將傳回`false`。 例如，如果`parentSchema`匯入`childSchema1`並`childSchema2`只會移除下列程式碼`parentSchema`，但不是匯入`childSchema1`和`childSchema2`結構描述：  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 下列程式碼將會移除`parentSchema`和匯入的結構描述：  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>方法沒有任何作用狀態的<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例說明新增至多個結構描述<xref:System.Xml.Schema.XmlSchemaSet>，然後移除其中一個結構描述和匯入使用的所有結構描述<xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A>方法。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">以參數形式傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reprocess (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Reprocess(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Reprocess : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Reprocess schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">要重新處理的結構描述。</param>
        <summary>重新處理已存在於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XML 結構描述定義語言 (XSD) 結構描述。</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" /> 物件 (如果結構描述是有效的結構描述)。 如果結構描述無效，且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，則會傳回 <see langword="null" />，並會引發適當的驗證事件。 否則會擲回 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重新處理結構描述執行結構描述上執行的所有前置處理步驟時<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>呼叫方法。 如果在呼叫<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>成功，請<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性設定為`false`。  
  
 中的結構描述之後，就應該使用的重新處理方法<xref:System.Xml.Schema.XmlSchemaSet>之後已經修改<xref:System.Xml.Schema.XmlSchemaSet>執行編譯。  
  
> [!NOTE]
>  您必須呼叫<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法，如果您已變更的結構描述 （或其中一個包含/匯入） 之後將它新增至, <xref:System.Xml.Schema.XmlSchemaSet>。 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法會檢查結構描述的結構化的有效性，根據 W3C XML 結構描述的規則。 不過，它不會執行完整的驗證檢查。 它也會解析內部和外部結構描述元件的參考。 已成功擷取任何匯入或包含結構描述也會新增至<xref:System.Xml.Schema.XmlSchemaSet>。 匯入結構描述會新增為個別<xref:System.Xml.Schema.XmlSchema>物件時包含結構描述進行一部分包括<xref:System.Xml.Schema.XmlSchema>。 如果重新處理呼叫成功，<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性設定為 false。  
  
   
  
## Examples  
 下列範例說明重新處理結構描述新增至<xref:System.Xml.Schema.XmlSchemaSet>。 之後<xref:System.Xml.Schema.XmlSchemaSet>使用編譯<xref:System.Xml.Schema.XmlSchemaSet.Compile%2A>方法，並新增至結構描述<xref:System.Xml.Schema.XmlSchemaSet>已經過修改，<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性會設定為`true`即使在結構描述、<xref:System.Xml.Schema.XmlSchemaSet>已經過修改。 呼叫<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法所執行的所有前置處理由執行<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法，並將<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>屬性設`false`。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">此結構描述無效。</exception>
        <exception cref="T:System.ArgumentNullException">做為參數傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">以參數形式傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件不存在於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中 XML 結構描述定義語言 (XSD) 結構描述的集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas();" />
      <MemberSignature Language="F#" Value="member this.Schemas : unit -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 結構描述定義語言 (XSD) 結構描述的集合。</summary>
        <returns><see cref="T:System.Collections.ICollection" /> 物件，包含已加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的所有結構描述。 如果結構描述尚未加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，則會傳回空的 <see cref="T:System.Collections.ICollection" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳回已加入間接的結構描述<xref:System.Xml.Schema.XmlSchemaSet>因為它們已匯入。  
  
> [!NOTE]
>  <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>方法就相當於<xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A>方法的過時<xref:System.Xml.Schema.XmlSchemaCollection>。  
  
   
  
## Examples  
 下列範例說明如何逐一查看中的所有結構描述<xref:System.Xml.Schema.XmlSchemaSet>。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas (targetNamespace As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Schemas : string -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">結構描述 <paramref name="targetNamespace" /> 屬性。</param>
        <summary>傳回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中屬於指定命名空間之所有 XML 結構描述定義語言 (XSD) 結構描述的集合。</summary>
        <returns><see cref="T:System.Collections.ICollection" /> 物件，包含已加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 之屬於指定命名空間的所有結構描述。 如果結構描述尚未加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，則會傳回空的 <see cref="T:System.Collections.ICollection" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`targetNamespace`參數是`null`或<xref:System.String.Empty>，則會傳回沒有命名空間的所有結構描述。  
  
 這個方法會傳回已加入間接的結構描述<xref:System.Xml.Schema.XmlSchemaSet>因為它們已匯入。  
  
> [!NOTE]
>  <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>方法就相當於<xref:System.Xml.Schema.XmlSchemaCollection.Item%2A>方法的過時<xref:System.Xml.Schema.XmlSchemaCollection>。  
  
   
  
## Examples  
 下列範例說明如何逐一查看中的所有結構描述http://www.contoso.com/books中的命名空間<xref:System.Xml.Schema.XmlSchemaSet>。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定事件處理常式，接收 XML 結構描述定義語言 (XSD) 結構描述驗證錯誤的資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定接收結構描述驗證錯誤的相關資訊的事件處理常式時<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>或是<xref:System.Xml.Schema.XmlSchemaSet.Compile%2A>方法<xref:System.Xml.Schema.XmlSchemaSet>稱為。  
  
 如果未定義的事件處理常式，<xref:System.Xml.Schema.XmlSchemaException>就會擲回的任何驗證錯誤所在<xref:System.Xml.Schema.XmlSeverityType>是<xref:System.Xml.Schema.XmlSeverityType.Error>。 不會使用的驗證錯誤會擲回例外狀況<xref:System.Xml.Schema.XmlSeverityType>的<xref:System.Xml.Schema.XmlSeverityType.Warning>。  
  
   
  
## Examples  
 下列程式碼範例說明如何新增<xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>時驗證結構描述的 XML 文件擷取錯誤和警告。  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 此範例會使用 books.xml 檔案做為輸入。  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 此範例會使用 books.xsd 檔案做為輸入。  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定 <see cref="T:System.Xml.XmlResolver" />，用於解析在結構描述之 Include 和 Import 項目中參考的命名空間或位置。</summary>
        <value><see cref="T:System.Xml.XmlResolver" />，用於解析在結構描述之 Include 和 Import 項目中參考的命名空間或位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver>的<xref:System.Xml.Schema.XmlSchemaSet>用來解析命名空間或位置中參考包含和匯入的結構描述的項目使用加入結構描述的任何時間<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>或<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法。  
  
> [!IMPORTANT]
>  外部命名空間或位置中參考包含，匯入和重新定義結構描述項目的解決相關的結構描述併入或匯入它們的基底 URI。 例如，如果併入或匯入結構描述的基底 URI 是空的或`null`，外部的位置會相對於目前的目錄解析。 <xref:System.Xml.XmlUrlResolver>類別預設用來解析外部結構描述。 若要停用解析的 include，匯入，並重新定義結構描述的項目，設定<xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A>屬性設`null`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>
