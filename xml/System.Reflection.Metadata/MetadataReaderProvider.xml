<Type Name="MetadataReaderProvider" FullName="System.Reflection.Metadata.MetadataReaderProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d4dfe3085010ff41afc30acb0c4089b59447d3f8" /><Meta Name="ms.sourcegitcommit" Value="0de246131f8a87c71d008d055adec7bf72470c4f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="05/29/2019" /><Meta Name="ms.locfileid" Value="66301991" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataReaderProvider : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataReaderProvider extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.MetadataReaderProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataReaderProvider&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataReaderProvider sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataReaderProvider = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataReaderProvider.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49f68-101">處置所有由讀取器所配置的記憶體。</span><span class="sxs-lookup"><span data-stu-id="49f68-101">Disposes all memory allocated by the reader.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMetadataImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage (System.Collections.Immutable.ImmutableArray&lt;byte&gt; image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMetadataImage (image As ImmutableArray(Of Byte)) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromMetadataImage(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; image);" />
      <MemberSignature Language="F#" Value="static member FromMetadataImage : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="image"><span data-ttu-id="49f68-102">中繼資料映像。</span><span class="sxs-lookup"><span data-stu-id="49f68-102">Metadata image.</span></span></param>
        <summary><span data-ttu-id="49f68-103">透過位元組陣列建立提供者。</span><span class="sxs-lookup"><span data-stu-id="49f68-103">Creates a provider over a byte array.</span></span></summary>
        <returns><span data-ttu-id="49f68-104">新的提供者。</span><span class="sxs-lookup"><span data-stu-id="49f68-104">The new provider.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="49f68-105"><paramref name="image" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="49f68-105"><paramref name="image" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromMetadataImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage (byte* start, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage(unsigned int8* start, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromMetadataImage(System::Byte* start, int size);" />
      <MemberSignature Language="F#" Value="static member FromMetadataImage : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage (start, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="49f68-106">指向中繼資料 Blob 開頭的指標。</span><span class="sxs-lookup"><span data-stu-id="49f68-106">Pointer to the start of the metadata blob.</span></span></param>
        <param name="size"><span data-ttu-id="49f68-107">中繼資料 Blob 的大小。</span><span class="sxs-lookup"><span data-stu-id="49f68-107">The size of the metadata blob.</span></span></param>
        <summary><span data-ttu-id="49f68-108">透過儲存在記憶體中的映像，建立中繼資料提供者。</span><span class="sxs-lookup"><span data-stu-id="49f68-108">Creates a metadata provider over an image stored in memory.</span></span></summary>
        <returns><span data-ttu-id="49f68-109">新的中繼資料提供者。</span><span class="sxs-lookup"><span data-stu-id="49f68-109">The new metadata provider.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="49f68-110"><paramref name="start" /> 為 <see cref="F:System.IntPtr.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="49f68-110"><paramref name="start" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="49f68-111"><paramref name="size" /> 為負。</span><span class="sxs-lookup"><span data-stu-id="49f68-111"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromMetadataStream">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromMetadataStream (System.IO.Stream stream, System.Reflection.Metadata.MetadataStreamOptions options = System.Reflection.Metadata.MetadataStreamOptions.Default, int size = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromMetadataStream(class System.IO.Stream stream, valuetype System.Reflection.Metadata.MetadataStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataStream(System.IO.Stream,System.Reflection.Metadata.MetadataStreamOptions,System.Int32)" />
      <MemberSignature Language="F#" Value="static member FromMetadataStream : System.IO.Stream * System.Reflection.Metadata.MetadataStreamOptions * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromMetadataStream (stream, options, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.Metadata.MetadataStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="49f68-112"><see cref="T:System.IO.Stream" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="49f68-112">A <see cref="T:System.IO.Stream" /> instance.</span></span></param>
        <param name="options"><span data-ttu-id="49f68-113">指定如何從資料流讀取映像區段方法的選項。</span><span class="sxs-lookup"><span data-stu-id="49f68-113">Options specifying how sections of the image are read from the stream.</span></span></param>
        <param name="size"><span data-ttu-id="49f68-114">資料流內中繼資料 Blob 的大小。</span><span class="sxs-lookup"><span data-stu-id="49f68-114">Size of the metadata blob in the stream.</span></span> <span data-ttu-id="49f68-115">若未指定，則假設中繼資料 Blob 會延展到資料流結尾。</span><span class="sxs-lookup"><span data-stu-id="49f68-115">If not specified, the metadata blob is assumed to span to the end of the stream.</span></span></param>
        <summary><span data-ttu-id="49f68-116">從資料流目前的位置開始，為指定大小的資料流建立提供者。</span><span class="sxs-lookup"><span data-stu-id="49f68-116">Creates a provider for a stream of the specified size beginning at its current position.</span></span></summary>
        <returns><span data-ttu-id="49f68-117">新的提供者。</span><span class="sxs-lookup"><span data-stu-id="49f68-117">The new provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="49f68-118">除非<xref:F:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen>指定的資料流擁有權轉移到<xref:T:System.Reflection.Metadata.MetadataReaderProvider>時成功的引數的驗證。</span><span class="sxs-lookup"><span data-stu-id="49f68-118">Unless <xref:F:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen> is specified, ownership of the stream is transferred to the <xref:T:System.Reflection.Metadata.MetadataReaderProvider>  upon successful argument validation.</span></span> <span data-ttu-id="49f68-119">它會處置<xref:T:System.Reflection.Metadata.MetadataReaderProvider>和呼叫端必須不會管理它。</span><span class="sxs-lookup"><span data-stu-id="49f68-119">It will be disposed by the <xref:T:System.Reflection.Metadata.MetadataReaderProvider> and the caller must not manipulate it.</span></span>
            
<span data-ttu-id="49f68-120">除非<xref:F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata>指定從資料流讀取任何資料，是將它的建構期間<xref:T:System.Reflection.Metadata.MetadataReaderProvider>。</span><span class="sxs-lookup"><span data-stu-id="49f68-120">Unless <xref:F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata> is specified no data is read from the stream during the construction of the <xref:T:System.Reflection.Metadata.MetadataReaderProvider>.</span></span> <span data-ttu-id="49f68-121">此外，資料流必須不由操作時的呼叫端<xref:T:System.Reflection.Metadata.MetadataReaderProvider>作用中且尚未處置。</span><span class="sxs-lookup"><span data-stu-id="49f68-121">Furthermore, the stream must not be manipulated by caller while the <xref:T:System.Reflection.Metadata.MetadataReaderProvider> is alive and undisposed.</span></span>
            
<span data-ttu-id="49f68-122">如果<xref:F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata>，則<xref:T:System.Reflection.Metadata.MetadataReaderProvider>會讀取所有要求在建構期間的資料。</span><span class="sxs-lookup"><span data-stu-id="49f68-122">If <xref:F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata>, the <xref:T:System.Reflection.Metadata.MetadataReaderProvider> will have read all of the data requested during construction.</span></span> <span data-ttu-id="49f68-123">因此，如果<xref:F:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen>同時指定，則呼叫端保留的資料流的完整擁有權，並可確保，它將不會由操作<xref:T:System.Reflection.Metadata.MetadataReaderProvider>建構完成之後。</span><span class="sxs-lookup"><span data-stu-id="49f68-123">As such, if <xref:F:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:T:System.Reflection.Metadata.MetadataReaderProvider> after construction.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="49f68-124"><paramref name="stream" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="49f68-124"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="49f68-125"><paramref name="stream" /> 不支援讀取及搜尋作業。</span><span class="sxs-lookup"><span data-stu-id="49f68-125"><paramref name="stream" /> doesn't support read and seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="49f68-126">大小為負數或延展超過資料流的結尾。</span><span class="sxs-lookup"><span data-stu-id="49f68-126">Size is negative or extends past the end of the stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="49f68-127">從資料流讀取時發生錯誤 (只有在指定了 <see cref="F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata" /> 時)。</span><span class="sxs-lookup"><span data-stu-id="49f68-127">Error reading from the stream (only when <see cref="F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata" /> is specified).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromPortablePdbImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage (System.Collections.Immutable.ImmutableArray&lt;byte&gt; image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPortablePdbImage (image As ImmutableArray(Of Byte)) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromPortablePdbImage(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; image);" />
      <MemberSignature Language="F#" Value="static member FromPortablePdbImage : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="image"><span data-ttu-id="49f68-128">可攜式 PDB 映像。</span><span class="sxs-lookup"><span data-stu-id="49f68-128">A portable PDB image.</span></span></param>
        <summary><span data-ttu-id="49f68-129">透過位元組陣列建立可攜式 PDB 中繼資料提供者。</span><span class="sxs-lookup"><span data-stu-id="49f68-129">Creates a portable PDB metadata provider over a byte array.</span></span></summary>
        <returns><span data-ttu-id="49f68-130">新的可攜式 PDB 中繼資料提供者。</span><span class="sxs-lookup"><span data-stu-id="49f68-130">The new portable PDB metadata provider .</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="49f68-131"><paramref name="image" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="49f68-131"><paramref name="image" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromPortablePdbImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage (byte* start, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage(unsigned int8* start, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromPortablePdbImage(System::Byte* start, int size);" />
      <MemberSignature Language="F#" Value="static member FromPortablePdbImage : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage (start, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="49f68-132">指向可攜式 PDB Blob 開頭的指標。</span><span class="sxs-lookup"><span data-stu-id="49f68-132">Pointer to the start of the portable PDB blob.</span></span></param>
        <param name="size"><span data-ttu-id="49f68-133">可攜式 PDB Blob 的大小。</span><span class="sxs-lookup"><span data-stu-id="49f68-133">The size of the portable PDB blob.</span></span></param>
        <summary><span data-ttu-id="49f68-134">透過記憶體中所儲存的 Blob，建立可攜式 PDB 中繼資料提供者。</span><span class="sxs-lookup"><span data-stu-id="49f68-134">Creates a portable PDB metadata provider over a blob stored in memory.</span></span></summary>
        <returns><span data-ttu-id="49f68-135">新的可攜式 PDB 中繼資料提供者。</span><span class="sxs-lookup"><span data-stu-id="49f68-135">The new portable PDB metadata provider.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="49f68-136"><paramref name="start" /> 為 <see cref="F:System.IntPtr.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="49f68-136"><paramref name="start" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="49f68-137"><paramref name="size" /> 為負。</span><span class="sxs-lookup"><span data-stu-id="49f68-137"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromPortablePdbStream">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbStream (System.IO.Stream stream, System.Reflection.Metadata.MetadataStreamOptions options = System.Reflection.Metadata.MetadataStreamOptions.Default, int size = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbStream(class System.IO.Stream stream, valuetype System.Reflection.Metadata.MetadataStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbStream(System.IO.Stream,System.Reflection.Metadata.MetadataStreamOptions,System.Int32)" />
      <MemberSignature Language="F#" Value="static member FromPortablePdbStream : System.IO.Stream * System.Reflection.Metadata.MetadataStreamOptions * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbStream (stream, options, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.Metadata.MetadataStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="49f68-138">資料流。</span><span class="sxs-lookup"><span data-stu-id="49f68-138">The stream.</span></span></param>
        <param name="options"><span data-ttu-id="49f68-139">指定如何從資料流讀取映像區段的選項。</span><span class="sxs-lookup"><span data-stu-id="49f68-139">Options specifying how sections of the image are read from the stream.</span></span></param>
        <param name="size"><span data-ttu-id="49f68-140">資料流內中繼資料 Blob 的大小。</span><span class="sxs-lookup"><span data-stu-id="49f68-140">Size of the metadata blob in the stream.</span></span> <span data-ttu-id="49f68-141">若未指定，則假設中繼資料 Blob 會延展到資料流結尾。</span><span class="sxs-lookup"><span data-stu-id="49f68-141">If not specified, the metadata blob is assumed to span to the end of the stream.</span></span></param>
        <summary><span data-ttu-id="49f68-142">從資料流目前的位置開始，為指定大小的資料流建立提供者。</span><span class="sxs-lookup"><span data-stu-id="49f68-142">Creates a provider for a stream of the specified size beginning at its current position.</span></span></summary>
        <returns><span data-ttu-id="49f68-143"><see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="49f68-143">A <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
            
<span data-ttu-id="49f68-144">除非<xref:F:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen>指定的資料流擁有權轉移到<xref:T:System.Reflection.Metadata.MetadataReaderProvider>時成功的引數的驗證。</span><span class="sxs-lookup"><span data-stu-id="49f68-144">Unless <xref:F:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen> is specified, ownership of the stream is transferred to the <xref:T:System.Reflection.Metadata.MetadataReaderProvider>  upon successful argument validation.</span></span> <span data-ttu-id="49f68-145">它會處置<xref:T:System.Reflection.Metadata.MetadataReaderProvider>和呼叫端必須不會管理它。</span><span class="sxs-lookup"><span data-stu-id="49f68-145">It will be disposed by the <xref:T:System.Reflection.Metadata.MetadataReaderProvider> and the caller must not manipulate it.</span></span>
            
<span data-ttu-id="49f68-146">除非<xref:F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata>指定從資料流讀取任何資料，是將它的建構期間<xref:T:System.Reflection.Metadata.MetadataReaderProvider>。</span><span class="sxs-lookup"><span data-stu-id="49f68-146">Unless <xref:F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata> is specified no data is read from the stream during the construction of the <xref:T:System.Reflection.Metadata.MetadataReaderProvider>.</span></span> <span data-ttu-id="49f68-147">此外，資料流必須不由操作時的呼叫端<xref:T:System.Reflection.Metadata.MetadataReaderProvider>作用中且尚未處置。</span><span class="sxs-lookup"><span data-stu-id="49f68-147">Furthermore, the stream must not be manipulated by caller while the <xref:T:System.Reflection.Metadata.MetadataReaderProvider> is alive and undisposed.</span></span>
            
<span data-ttu-id="49f68-148">如果<xref:F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata>，則<xref:T:System.Reflection.Metadata.MetadataReaderProvider>會讀取所有要求在建構期間的資料。</span><span class="sxs-lookup"><span data-stu-id="49f68-148">If <xref:F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata>, the <xref:T:System.Reflection.Metadata.MetadataReaderProvider> will have read all of the data requested during construction.</span></span> <span data-ttu-id="49f68-149">因此，如果<xref:F:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen>同時指定，則呼叫端保留的資料流的完整擁有權，並可確保，它將不會由操作<xref:T:System.Reflection.Metadata.MetadataReaderProvider>建構完成之後。</span><span class="sxs-lookup"><span data-stu-id="49f68-149">As such, if <xref:F:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:T:System.Reflection.Metadata.MetadataReaderProvider> after construction.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="49f68-150"><paramref name="stream" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="49f68-150"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="49f68-151"><paramref name="stream" /> 不支援讀取及搜尋作業。</span><span class="sxs-lookup"><span data-stu-id="49f68-151"><paramref name="stream" /> doesn't support read and seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="49f68-152">大小為負數或延展超過資料流的結尾。</span><span class="sxs-lookup"><span data-stu-id="49f68-152">Size is negative or extends past the end of the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataReader">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReader GetMetadataReader (System.Reflection.Metadata.MetadataReaderOptions options = System.Reflection.Metadata.MetadataReaderOptions.Default, System.Reflection.Metadata.MetadataStringDecoder utf8Decoder = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.MetadataReader GetMetadataReader(valuetype System.Reflection.Metadata.MetadataReaderOptions options, class System.Reflection.Metadata.MetadataStringDecoder utf8Decoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.GetMetadataReader(System.Reflection.Metadata.MetadataReaderOptions,System.Reflection.Metadata.MetadataStringDecoder)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataReader (Optional options As MetadataReaderOptions = System.Reflection.Metadata.MetadataReaderOptions.Default, Optional utf8Decoder As MetadataStringDecoder = null) As MetadataReader" />
      <MemberSignature Language="F#" Value="member this.GetMetadataReader : System.Reflection.Metadata.MetadataReaderOptions * System.Reflection.Metadata.MetadataStringDecoder -&gt; System.Reflection.Metadata.MetadataReader" Usage="metadataReaderProvider.GetMetadataReader (options, utf8Decoder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Reflection.Metadata.MetadataReaderOptions" />
        <Parameter Name="utf8Decoder" Type="System.Reflection.Metadata.MetadataStringDecoder" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="49f68-153">列舉值的位元組合，表示讀取中繼資料時的組態。</span><span class="sxs-lookup"><span data-stu-id="49f68-153">A bitwise combination of the enumeration values that represent the configuration when reading the metadata.</span></span></param>
        <param name="utf8Decoder"><span data-ttu-id="49f68-154">要使用的編碼方式。</span><span class="sxs-lookup"><span data-stu-id="49f68-154">The encoding to use.</span></span></param>
        <summary><span data-ttu-id="49f68-155">從 <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> 取得 <see cref="T:System.Reflection.Metadata.MetadataReader" />。</span><span class="sxs-lookup"><span data-stu-id="49f68-155">Gets a <see cref="T:System.Reflection.Metadata.MetadataReader" /> from a <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" />.</span></span></summary>
        <returns><span data-ttu-id="49f68-156">一個 <see cref="T:System.Reflection.Metadata.MetadataReader" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="49f68-156">A <see cref="T:System.Reflection.Metadata.MetadataReader" /> instance..</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="49f68-157"><paramref name="utf8Decoder" /> 的編碼並非 <see cref="T:System.Text.UTF8Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="49f68-157">The encoding of <paramref name="utf8Decoder" /> is not <see cref="T:System.Text.UTF8Encoding" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="49f68-158">目前平台為位元組由大到小。</span><span class="sxs-lookup"><span data-stu-id="49f68-158">The current platform is big-endian.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="49f68-159">從基礎資料流讀取時出現 IO 錯誤。</span><span class="sxs-lookup"><span data-stu-id="49f68-159">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="49f68-160">提供者已經過處置。</span><span class="sxs-lookup"><span data-stu-id="49f68-160">Provider has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
