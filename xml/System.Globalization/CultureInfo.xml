<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f5196546e73251da2eabb69b4bb1e4387408c6fb" /><Meta Name="ms.sourcegitcommit" Value="75eca440f8f4d595506405f48961f38649e160d7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="06/01/2019" /><Meta Name="ms.locfileid" Value="66458082" /></Metadata><TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type CultureInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供有關特定文化特性 (Culture) 的資訊 (文化特性在 Unmanaged 程式碼開發中稱為「地區設定」)。 這項資訊包含文化特性的名稱、書寫系統、使用的曆法、字串的排序次序，以及日期和數字的格式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo>類別提供特定文化特性資訊，例如語言、 次語言、 國家/地區、 行事曆和特定文化特性相關聯的慣例。 這個類別也會提供存取的特定文化特性的執行個體<xref:System.Globalization.DateTimeFormatInfo>， <xref:System.Globalization.NumberFormatInfo>， <xref:System.Globalization.CompareInfo>，和<xref:System.Globalization.TextInfo>物件。 這些物件包含特定文化特性的作業，例如大小寫、 格式化日期和數字和比較字串所需的資訊。 <xref:System.Globalization.CultureInfo>類別可供直接或間接類別，可格式化、 剖析，或處理特定文化特性的資料，例如<xref:System.String>， <xref:System.DateTime>， <xref:System.DateTimeOffset>，和數字的類型。  
  
 本節內容：  
  
 [文化特性名稱和識別碼](#CultureNames)   
 [非變異、 中性和特定文化特性](#Invariant)   
 [自訂文化特性](#Custom)   
 [動態的文化特性的資料](#Dynamic)   
 [CultureInfo 和文化特性的資料](#cultureinfo-and-cultural-data)[目前 UI 文化特性與目前的文化特性](#Current)   
 [取得所有文化特性](#GetAll)   
 [文化特性和執行緒](#Threads)   
 [文化特性和應用程式網域](#AppDomain)   
 [文化特性和以工作為基礎的非同步作業](#Async)   
 [CultureInfo 物件的序列化](#Serialization)   
 [控制台會覆寫](#CPanel)   
 [替代排序次序](#AlternateSort)   
 [文化特性和 Windows 應用程式](#Windows)  

<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>文化特性名稱和識別碼  
 <xref:System.Globalization.CultureInfo>類別會指定每個文化特性，根據 RFC 4646 的唯一名稱。 名稱是與語言相關聯的 ISO 639 兩個字母小寫文化特性代碼和國家/地區或區域相關聯的 ISO 3166 兩個字母大寫子文化特性代碼的組合。 此外，針對目標應用程式[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]或更新版本，而且正在執行 Windows 10 或更新版本中，對應至有效 BCP-47 語言標記支援的文化特性名稱。  
  
> [!NOTE]
>  當文化特性名稱傳遞至類別建構函式或方法這類<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>或<xref:System.Globalization.CultureInfo>，其大小寫不重要。  
  
 格式為文化特性名稱，根據 RFC 4646 *languagecode2*>-*country/regioncode2*，其中*languagecode2*是兩個字母的語言代碼並*country/regioncode2*是兩個字母子文化特性的程式碼。 範例包括 JA-JP 日文 （日本） 和 EN-US，適用於英文 （美國）。 在兩個字母的語言程式碼不提供的情況下，會使用衍生自 ISO 639-2 三個字母代碼。  
  
 請注意，某些文化特性名稱也會指定 ISO 15924。 比方說，Cyrl 指定斯拉夫文的指令碼和 Latn 指定英文的指令碼。 文化特性名稱，其中包含指令碼會使用模式*languagecode2*-*scripttag*-*country/regioncode2*。 這種文化特性名稱的範例是 uz 代表烏茲別克文 （斯拉夫，烏茲別克）。 在 Windows 作業系統在 Windows Vista 之前，文化特性名稱，其中包含指令碼會使用模式*languagecode2*-*country/regioncode2* - *scripttag*，比方說，uz-UZ-Cyrl 烏茲別克文 （斯拉夫，烏茲別克）。  
  
 中性文化特性是由兩個字母小寫字母的語言程式碼指定。 比方說，fr 指定中性文化特性的法文和德國德文指定中性文化特性。  
  
> [!NOTE]
>  有兩個相互抵觸此規則的文化特性名稱。 中文 （簡體）、 名為 Zh-hans 和中文 （繁體）、 名為 Zh-hant，文化特性是中性文化特性。 文化特性名稱代表目前的標準，而應使用，除非您有使用的舊名稱 ZH-CHS 和 ZH-CHT 的原因。  
  
 文化特性識別項是標準的國際數字縮寫，來唯一識別其中已安裝的文化特性所需的元件。 您的應用程式可以使用預先定義的文化特性識別項，或定義自訂的識別項。  
  
 某些預先定義的文化特性名稱，這和中的其他類別所使用的識別項<xref:System.Globalization?displayProperty=nameWithType>命名空間。 詳細的文化特性資訊會出現在[國家語言支援 (NLS) API 參考](https://go.microsoft.com/fwlink/?LinkId=200048)在 Go Global Developer Center。  
  
 請記住的文化特性名稱和識別碼，代表只可以在特定電腦找到的文化特性的子集。 Windows 版本或 service pack 可以變更可用的文化特性。 應用程式將使用的自訂文化特性<xref:System.Globalization.CultureAndRegionInfoBuilder>類別。 使用者會新增自己自訂的文化特性，使用 Microsoft Locale Builder 工具。 Microsoft Locale Builder 以 managed 程式碼使用`CultureAndRegionInfoBuilder`類別。  
  
 數個不同的名稱是密切相關聯的文化特性，值得注意的是將下列類別成員相關聯的名稱：  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>非變異、 中性和特定文化特性  
 文化特性通常分為三個集合： 而異的文化特性、 中性文化特性和特定文化特性。  
  
 不區分文化特性的文化特性而異。 您的應用程式指定文化特性而異，依名稱使用空字串 ("") 或依其識別項。 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 定義文化特性而異的執行個體。 相關聯的英文語言使用，但不是能搭配任何國家/地區。 在幾乎任何方法中使用`Globalization`需要文化特性的命名空間。  
  
 中性文化特性是相關聯的文化特性使用的語言，但是不會與國家/地區。 特定文化特性是一種語言和國家/地區相關聯的文化特性。 比方說，fr 是法文的文化特性的中性名稱，並為 FR-FR 是特定的法文 （法國） 文化特性的名稱。 請注意，中文 （簡體） 和中文 （繁體） 也會被視為中性文化特性。  
  
 建立的執行個體<xref:System.Globalization.CompareInfo>中性文化特性不建議，因為它所包含的資料是任意的類別。 若要顯示和排序資料，請指定語言和區域。 此外，<xref:System.Globalization.CompareInfo.Name%2A>屬性<xref:System.Globalization.CompareInfo>中性文化特性，傳回的國家/地區並不包括地區所建立的物件。  
  
 定義的文化特性具有的階層，其中的父代特定文化特性是中性文化特性，而是中性文化特性的父代是文化特性而異。 <xref:System.Globalization.CultureInfo.Parent%2A>屬性包含特定文化特性相關聯的中性文化特性。 應該要定義自訂的文化特性<xref:System.Globalization.CultureInfo.Parent%2A>符合此模式中的屬性。  
  
 如果特定文化特性的資源不會在作業系統中可用的則會使用相關聯的中性文化特性的資源。 如果無法使用中性文化特性的資源時，會使用內嵌於主要組件中的資源。 如需有關資源後援處理序的詳細資訊，請參閱 <<c0> [ 封裝和部署資源](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)。  
  
 Windows API 中的地區設定的清單是稍微不同的.NET Framework 所支援的文化特性的清單。 如果需要與 Windows 的互通性，比方說，透過 p/invoke 機制中，應用程式應該使用特定文化特性所定義的作業系統。 使用特定文化特性可確保對等的 Windows 地區設定，這識別與相同的地區設定識別碼的一致性<xref:System.Globalization.CultureInfo.LCID%2A>。  
  
 A<xref:System.Globalization.DateTimeFormatInfo>或<xref:System.Globalization.NumberFormatInfo>可以建立只而異的文化特性或特定文化特性，而非中性文化特性。  
  
 如果<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>已<xref:System.Globalization.TaiwanCalendar>但<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>不設定為 ZH-TW，然後<xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType>， <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType>，和<xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType>傳回空字串 ("")。  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>自訂文化特性  
 除了預先定義的文化特性支援的 Windows 作業系統和.NET Framework 時，.NET Framework 支援三種類型的自訂文化特性：  
  
-   補充的文化特性可在 Windows 或.NET Framework 中的新文化特性。 例如，應用程式無法安裝<xref:System.Globalization.CultureInfo>代表 fj-fj 將 （或 Fijan （斐濟）） 文化特性的系統上的物件。  
  
-   其屬性會不同於標準 Windows 和.NET Framework 所支援的文化特性的屬性取代的文化特性。  
  
-   標準使用者的文化特性會覆寫。 使用者可以使用**地區和語言**應用程式**控制台**自訂現有文化特性的屬性值。  
  
> [!NOTE]
>  您可以使用<xref:System.Globalization.CultureAndRegionInfoBuilder>類別來定義、 儲存及註冊自訂的文化特性，來補充或取代現有的文化特性。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType>方法會建立可用來在目標系統上安裝自訂的文化特性的地區設定資料標記語言 (LDML) 檔案。 如逐步步驟需使用<xref:System.Globalization.CultureAndRegionInfoBuilder>來建立新的類別或取代的文化特性，請參閱<xref:System.Globalization.CultureAndRegionInfoBuilder>類別主題。  
  
 由於.NET Framework 支援自訂文化特性，您應該考慮下列使用特定文化特性的資料時：  
  
-   自訂文化特性可以有超過預先定義的文化特性的範圍的值。 比方說，某些文化特性已久的月份名稱、 未預期的日期或時間格式或其他不尋常的資料。  
  
-   當您在使用者介面中顯示特定文化特性的資料時，您應該採用使用者的自訂項目;例如，使用者可能會想採用 24 小時制或 yyyyMMdd 日期格式。  
  
-   請記住，自訂文化特性覆寫預設值。 因此，您無法考慮文化特性資料視為穩定。 國家/地區名稱、 數字和日期格式和拼字可能在未來變更。 如果您想要將區分文化特性的資料，例如要傳遞至日期和時間剖析函式的日期和時間字串序列化，您應該使用區分文化特性或特定。  
  
 <xref:System.Globalization.CultureInfo.CultureTypes%2A>安裝在系統上的自訂文化特性的屬性值會包含<xref:System.Globalization.CultureTypes?displayProperty=nameWithType>旗標及自訂的文化特性會被指派<xref:System.Globalization.CultureInfo.LCID%2A>屬性值為`LOCALE_CUSTOM_UNSPECIFIED`（0x1000 控制或 4096）。 請注意，從 Windows 10 開始，這個值也會指派給系統定義的文化特性缺少完整文化特性的資料。  

## <a name="cultureinfo-and-cultural-data"></a>CultureInfo 和文化特性的資料

.NET 衍生其文化特性的資料從各種來源，取決於實作、 平台和版本的其中一個：

- 在.NET Framework 3.5 和更早版本中，文化特性的資料是由 Windows 作業系統和.NET Framework 提供。

- 在.NET Framework 4 和更新版本中，由 Windows 作業系統提供文化特性的資料。

- 在所有版本的 Windows 上執行的.NET Core，文化特性的資料是由 Windows 作業系統提供。

- 在所有版本的 Unix 平台上執行的.NET Core，文化特性的資料會提供[Unicode (ICU) 程式庫的多語系元件](http://site.icu-project.org/)。 ICU 程式庫的特定版本取決於個別的作業系統。

因為這個緣故，在特定.NET 實作、 平台或版本，您可以使用的文化特性可能無法在不同.NET 實作、 平台或版本。

某些`CultureInfo`物件基礎的平台而有所不同。 特別是，「 ZH-CN 」 或中文 （簡體，中國） 和 ZH-TW、 中文 （繁體，台灣），會在 Windows 系統上可用的文化特性，但會在 Unix 系統上的別名文化特性。 「 ZH-CN 」 是 「 Hans-ZH-CN"文化特性的別名和"ZH-TW"是"Hant-ZH-TW"文化特性的別名。 別名的文化特性不會傳回呼叫<xref:System.Globalization.CultureInfo.GetCultures%2A>方法，可能有不同的屬性值，包括不同<xref:System.Globalization.CultureInfo.Parent>文化特性，比與其 Windows 對應項目。 這些 differenes ZH-CN 和 ZH-TW 文化特性，包括下列：

- Windows 系統上 「 ZH-CN 」 文化特性的父文化特性 」 Zh-hans"，而"ZH-TW"文化特性的父文化特性 」 Zh-hant"。 這些文化特性的父文化特性是 「 zh"。 在 Unix 系統上兩個文化特性的父代會是"zh 」。 這表示，如果您未提供特定文化特性資源之 「 ZH-CN"或"ZH-TW"文化特性，但不要提供資源的中性 」-Zh-hans 」 或 「 Zh-hant"文化特性，您的應用程式會載入在 Windows 上，但不是能在 Unix 中性文化特性的資源. Unix 系統上，您必須明確設定執行緒的<xref:System.Globalization.CultureInfo.CurrentUICulture>"Zh-hans 」 或 「 Zh-hant"。 

- 在 Windows 系統上，呼叫<xref:System.Globalization.CultureInfo.Equals%2A?displayProperty=nameWithType>表示執行個體上的 「 ZH-CN 」 文化特性，並將其傳遞 「 Hans-ZH-CN"的執行個體傳回`true`。 在 Unix 系統上的方法呼叫傳回`false`。 此行為也適用於呼叫<xref:System.Globalization.CultureInfo.Equals%2A>上"ZH-TW"<xref:System.Globalization.CultureInfo>執行個體，並將其傳遞"Hant-Zh-tw"執行個體。

<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>動態的文化特性的資料  
 除了文化特性而異，文化特性的資料是動態的。 這是也適用於預先定義的文化特性。 例如，國家或地區採用新的貨幣、 變更其拼字的文字，或變更其慣用的行事曆和文化特性定義變更來追蹤這。  自訂文化特性可能會有所變更，恕不另行通知，並可能會由自訂取代的文化特性覆寫任何特定的文化特性。 此外下, 面所述，個別使用者可以覆寫文化特性喜好設定。 應用程式一律應在執行階段取得文化特性的資料。  
  
> [!CAUTION]
>  儲存資料時，您的應用程式應該使用文化特性而異，一種二進位格式或特定文化特性無關的格式。 根據目前文化特性而異，以外特定文化特性相關聯的值已儲存的資料可能會變得無法讀取，或如果該文化特性變更，可能會變更的意義。  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>目前 UI 文化特性與目前的文化特性  
 在.NET 應用程式中的每個執行緒有目前的文化特性和目前的 UI 文化特性。 目前的文化特性會決定格式設定慣例的日期、 時間、 數字和貨幣值、 文字、 大小寫慣例和比較字串的方式的排序次序。 目前的 UI 文化特性用來擷取在執行階段的特定文化特性的資源。  
  
> [!NOTE]
>  如需如何在個別執行緒上決定的目前和目前 UI 文化特性資訊，請參閱[文化特性和執行緒](#Threads)一節。 如需目前與目前 UI 文化特性如何判斷在執行緒上執行新的應用程式定義域和執行緒跨越應用程式定義域界限，請參閱[文化特性和應用程式定義域](#AppDomain)一節。 如需如何判斷目前與目前執行工作為基礎的非同步作業的執行緒上的資訊，請參閱[文化特性和以工作為基礎的非同步作業](#Async)一節。  
  
 如需詳細的目前文化特性的詳細資訊，請參閱<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>屬性主題。 如需詳細的目前 UI 文化特性的詳細資訊，請參閱<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>屬性主題。  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>擷取目前和目前 UI 文化特性  
 您可以取得<xref:System.Globalization.CultureInfo>物件，表示目前的文化特性，在兩種方式之一：  
  
-   所擷取的值<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>屬性。  
  
-   所擷取的值[Thread.CurrentThread.CurrentCulture](<xref:System.Threading.Thread.CurrentCulture>)屬性。  
  
 下列範例會擷取這兩個屬性值，比較它們，以顯示它們相等，而會顯示目前的文化特性名稱。  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 您可以取得<xref:System.Globalization.CultureInfo>物件，代表目前 UI 文化特性，在兩種方式之一：  
  
-   所擷取的值<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>屬性。  
  
-   所擷取的值[Thread.CurrentThread.CurrentUICulture](<xref:System.Threading.Thread.CurrentUICulture>)屬性。  
  
 下列範例會擷取這兩個屬性值，比較它們，以顯示它們相等，並顯示目前 UI 文化特性的名稱。  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>設定目前和目前 UI 文化特性  
 若要變更文化特性和 UI 文化特性的執行緒，執行下列作業：  
  
1.  具現化<xref:System.Globalization.CultureInfo>物件，表示該文化特性，藉由呼叫<xref:System.Globalization.CultureInfo>類別建構函式，並將其傳遞文化特性名稱。 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>建構函式具現化<xref:System.Globalization.CultureInfo>反映使用者的物件會覆寫，如果新的文化特性與目前的 Windows 文化特性相同。   <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>建構函式可讓您指定是否新具現化<xref:System.Globalization.CultureInfo>物件會反映新的文化特性是否與目前的 Windows 文化特性相同，會覆寫使用者。  
  
2.  指派<xref:System.Globalization.CultureInfo>物件至<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>或<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>.NET Core 和.NET Framework 4.6 和更新版本上的屬性。 (.NET Framework 4.5.2 和舊版中，指派 youc`CultureInfo`物件至<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>或<xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>屬性。)   
  
 下列範例會擷取目前文化特性。 如果是法文 （法國） 文化特性以外的任何項目，它會將目前的文化特性變更為法文 （法國）。 否則，它目前的文化特性變更為法文 （盧森堡）。  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 下列範例會擷取目前文化特性。 如果是任何其他的斯洛維尼亞文 （斯洛維尼亞） 文化特性，它將目前的文化特性變更為斯洛維尼亞文 （斯洛維尼亞）。 否則，它會變更目前的文化特性設為克羅埃西亞文 （克羅埃西亞）。  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>取得所有文化特性  
 您可以藉由呼叫擷取所有在本機電腦上使用的文化特性或文化特性的陣列特定類別<xref:System.Globalization.CultureInfo.GetCultures%2A>方法。 例如，您可以擷取自訂文化特性、 特定的文化特性或中性文化特性單獨或合併。  
  
 下列範例會呼叫<xref:System.Globalization.CultureInfo.GetCultures%2A>方法兩次，第一<xref:System.Globalization.CultureTypes?displayProperty=nameWithType>列舉的成員，才能擷取所有的自訂文化特性和<xref:System.Globalization.CultureTypes?displayProperty=nameWithType>来擷取所有取代的文化特性的列舉型別成員。  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>文化特性和執行緒  
 新的應用程式執行緒啟動時，其目前的文化特性和目前 UI 文化特性是會定義由目前的系統文化特性，而不是由目前執行緒文化特性。 下列範例會說明其間的差異。 它會設定應用程式執行緒的目前 UI 文化特性與目前的文化特性為法文 （法國） 文化特性 (FR-FR)。 如果目前的文化特性已經為 FR-FR，則範例會將它設定為英文 （美國） 文化特性 (EN-US)。 它會顯示為貨幣值的三個隨機數字，並接著會建立新的執行緒，而接著會三個比較隨機的數字顯示為貨幣值。 但是，例所示的輸出，顯示新的執行緒的貨幣值不會反映法文 （法國） 文化特性格式化慣例，不同於主應用程式執行緒的輸出。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 在之前的.NET Framework 的版本中[!INCLUDE[net_v45](~/includes/net-v45-md.md)]，則確定主應用程式執行緒都與所有其他背景工作執行緒是共用相同的文化特性的常見方式是將整個應用程式的文化特性的名稱或<xref:System.Globalization.CultureInfo>物件表示整個應用程式的文化特性<xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType>委派。 下列範例會使用這種方法，以確保顯示兩個執行緒的貨幣值會反映相同的文化特性的格式化慣例。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 您可以設定的文化特性和 UI 文化特性的執行緒集區執行緒中類似的方式呼叫<xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType>方法。  
  
 開頭[!INCLUDE[net_v45](~/includes/net-v45-md.md)]，您可以設定的文化特性和 UI 文化特性，所有執行緒的應用程式定義域中更直接指派<xref:System.Globalization.CultureInfo>物件，表示該文化特性<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>和<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>屬性。 下列範例會使用這些屬性，以確保 預設應用程式定義域中的所有執行緒都共用相同的文化特性。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  雖然<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>和<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>屬性是靜態成員，它們會定義預設文化特性和只針對目前在設定這些屬性的值時間的應用程式定義域的預設 UI 文化特性。 如需詳細資訊，請參閱下一步 區段中，[文化特性和應用程式定義域](#AppDomain)。  
  
 當您將值指派給<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>和<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>屬性、 文化特性和 UI 文化特性的應用程式定義域中的執行緒也變更如果他們未明確指派文化特性。 不過，這些執行緒反映新的文化特性設定，只有當目前的應用程式定義域中執行時。 如果這些執行緒會執行另一個應用程式定義域中，其文化特性會變成該應用程式定義域所定義的預設文化特性。 如此一來，我們建議您一定會設定主應用程式執行緒的文化特性，而不依賴<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>和<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>屬性來變更它。  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>文化特性和應用程式網域  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 和<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>會明確地定義只會針對應用程式定義域的目前設定或擷取屬性值時的預設文化特性的靜態屬性。 下列範例預設應用程式定義域中的預設文化特性和預設 UI 文化特性設定為法文 （法國），然後使用<xref:System.AppDomainSetup>類別和<xref:System.AppDomainInitializer>委派以設定至新的應用程式定義域中的預設文化特性和 UI 文化特性俄文 （俄羅斯）。 然後，單一執行緒會每個應用程式定義域中執行兩種方法。 請注意，執行緒的文化特性和 UI 文化特性未明確設定;它們被衍生自的預設文化特性和 UI 文化特性的執行緒正在執行的應用程式定義域。 另請注意<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>並<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>屬性會傳回預設值<xref:System.Globalization.CultureInfo>是方法呼叫時，將最新的應用程式定義域的值。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 如需文化特性和應用程式定義域的詳細資訊，請參閱中的 「 應用程式定義域和執行緒 」 一節[應用程式定義域](~/docs/framework/app-domains/application-domains.md)主題。  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>文化特性和以工作為基礎的非同步作業  
 [工作式非同步程式設計模式](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)會使用<xref:System.Threading.Tasks.Task>和<xref:System.Threading.Tasks.Task%601>物件以非同步方式執行委派，在執行緒集區的執行緒。 特定工作執行所在的特定執行緒事先不知道，但只有在執行階段決定。  
  
 目標應用程式，[!INCLUDE[net_v46](~/includes/net-v46-md.md)]或更新版本、 文化特性是非同步的作業內容的一部分。 換句話說，從應用程式為目標[!INCLUDE[net_v46](~/includes/net-v46-md.md)]，預設的非同步作業繼承的值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>和<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>從中啟動之執行緒的內容。 如果目前的文化特性或目前 UI 文化特性和不同系統的文化特性，目前的文化特性跨越執行緒界限，並會變成 正在執行非同步作業的執行緒集區執行緒的目前文化特性。  
  
 下列範例提供一個簡單的範例。 它會使用<xref:System.Runtime.Versioning.TargetFrameworkAttribute>屬性，以目標[!INCLUDE[net_v46](~/includes/net-v46-md.md)]。 此範例會定義<xref:System.Func%601>委派， `formatDelegate`，傳回格式化為貨幣值的數字。 此範例將目前的系統文化特性變更為 「 法文 （法國） 或法文 （法國） 」 已經是目前的文化特性，英文 （美國）。 它然後：  
  
-   使其在主應用程式的執行緒上執行以同步方式，直接叫用委派。  
  
-   建立執行緒集區執行緒以非同步方式執行委派的工作。  
  
-   建立工作，藉由呼叫委派以同步方式執行的主要應用程式執行緒上<xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType>方法。  
  
 如範例輸出所示，當目前的文化特性會變更為法文 （法國），目前的工作會叫用非同步執行緒文化特性會變成該非同步作業的目前文化特性。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 之前的.NET Framework 版本為目標的應用程式的[!INCLUDE[net_v46](~/includes/net-v46-md.md)]，或針對執行特定版本的.NET Framework 為目標的應用程式，呼叫執行緒的文化特性不是工作的內容的一部分。 相反地，除非有明確定義，預設的新執行緒的文化特性就是系統的文化特性。 下列範例中，也就是與前一個範例相同，不同之處在於它缺乏<xref:System.Runtime.Versioning.TargetFrameworkAttribute>屬性，可說明這點。 因為此範例執行所在系統的系統文化特性是工作的英文 （美國），可在執行緒集區執行緒上以非同步方式執行的文化特性是工作的 EN-US，而不是工作的 fr-fr。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 從.NET Framework 版本為目標的應用程式[!INCLUDE[net_v45](~/includes/net-v45-md.md)]和更新版本，但之前[!INCLUDE[net_v46](~/includes/net-v46-md.md)]，您可以使用<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>和<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>屬性，以確保呼叫執行緒的文化特性會用於非同步工作在執行緒集區執行緒上執行。 下列範例等同於上述範例中，不同之處在於它會使用<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>屬性，以確認該執行緒集區執行緒有相同的文化特性，與主要應用程式的執行緒。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 和<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>是每個應用程式定義域屬性; 也就是其所建立的預設文化特性的所有執行緒未明確都指派文化特性特定的應用程式定義域中。 不過，對於目標的應用程式[!INCLUDE[net_v46](~/includes/net-v46-md.md)]或更新版本中，會呼叫執行緒的文化特性仍非同步工作的內容的一部分，即使工作跨越應用程式定義域界限。  
  
 下列範例示範即使在執行工作的方法可跨越應用程式定義域界限的呼叫執行緒文化特性，仍會以工作為基礎的非同步作業的目前文化特性。 它會定義一個類別， `DataRetriever`，具有單一方法， `GetFormattedNumber`，介於 1 到 1,000 格式化為貨幣值，傳回的隨機的雙精確度浮點數。 第一項工作會執行，只會具現化`DataRetriever`執行個體並呼叫其`GetFormattedNumber`方法。 第二個工作會報告其目前的應用程式定義域、 建立新的應用程式定義域、 具現化`DataRetriever`執行個體，在新的應用程式定義域，然後呼叫其`GetFormattedNumber`方法。 如範例輸出所示，目前的文化特性一直呼叫的執行緒，第一項工作和第二個工作都在相同的主應用程式定義域和第二個應用程式定義域中執行時。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>  
## <a name="cultureinfo-object-serialization"></a>CultureInfo 物件的序列化  
 當<xref:System.Globalization.CultureInfo>序列化物件時，實際上儲存只<xref:System.Globalization.CultureInfo.Name%2A>和<xref:System.Globalization.CultureInfo.UseUserOverride%2A>。 它是只在環境中成功還原序列化所在的<xref:System.Globalization.CultureInfo.Name%2A>具有相同的意義。 下列三個範例顯示為什麼這不一定會這樣：  
  
- 如果<xref:System.Globalization.CultureInfo.CultureTypes%2A>屬性值是<xref:System.Globalization.CultureTypes.InstalledWin32Cultures?displayProperty=nameWithType>，如果在特定版本的 Windows 作業系統中引進該文化特性，不可能將它還原序列化舊版 Windows 上。 比方說，如果文化特性在 Windows 10 中引進，它無法還原序列化，在 Windows 8 上。  
  
-   如果<xref:System.Globalization.CultureInfo.CultureTypes%2A>值是<xref:System.Globalization.CultureTypes.UserCustomCulture?displayProperty=nameWithType>，並在其已還原序列化的電腦沒有安裝此使用者自訂文化特性，不可能將它還原序列化。  
  
-   如果<xref:System.Globalization.CultureInfo.CultureTypes%2A>值是<xref:System.Globalization.CultureTypes.ReplacementCultures?displayProperty=nameWithType>，並在其已還原序列化的電腦沒有此取代的文化特性，還原序列化至相同的名稱，但不是所有相同的特性。 例如，EN-US 是否取代的文化特性上的電腦，但不是能在電腦 B，以及是否<xref:System.Globalization.CultureInfo>物件指的此文化特性會在電腦 A 上序列化並在電腦 B 上還原序列化則沒有任何自訂的文化特性，傳輸。 文化特性還原序列化成功，但具有不同的意義。  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>控制台會覆寫  
 使用者可能選擇覆寫一些與目前的文化特性的 Windows [控制台] 的 [地區及語言選項] 部分透過相關聯的值。 比方說，使用者可能會選擇不同的格式顯示日期，或使用文化特性的預設值以外的貨幣。 一般情況下，您的應用程式應該接受這些使用者覆寫。  
  
 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A>已`true`和指定的文化特性相符的 Windows，目前的文化特性<xref:System.Globalization.CultureInfo>會使用這些覆寫，包括使用者設定之屬性的<xref:System.Globalization.DateTimeFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性，和資料庫屬性<xref:System.Globalization.NumberFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>，例如，如果所選行事曆不是其中一個<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>，不會定義方法的結果和屬性的值。  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>替代排序次序  
 某些文化特性支援一個以上的排序次序。 例如：  
  
-   西班牙文 （西班牙） 文化特性中有兩個排序順序： 預設的國際排序順序，與傳統的排序順序。 當您具現化<xref:System.Globalization.CultureInfo>ES-ES 文化特性名稱，物件會使用國際排序順序。 當您具現化<xref:System.Globalization.CultureInfo>es-ES-tradnl 文化特性名稱，物件會使用傳統的排序順序。  
  
-   ZH-CN （中文 （簡體，中國）） 文化特性支援兩個排序順序： 依照拼音 （預設值） 和依照筆畫。 當您具現化<xref:System.Globalization.CultureInfo>ZH-CN 文化特性名稱，物件會使用預設排序順序。 當您具現化<xref:System.Globalization.CultureInfo>0x00020804，區域識別項物件的字串會依照筆畫來排序。  
  
 下表列出支援的預設和替代排序次序的替代排序次序和識別項的文化特性。  
  
|文化特性名稱|culture|預設排序名稱和識別碼|替代的排序名稱和識別碼|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|西班牙文 （西班牙）|國際電話號碼：0x00000C0A|傳統：0x0000040A|  
|zh-TW|中文 （台灣）|筆劃數：0x00000404|注音符號：0x00030404|  
|zh-CN|中文 （中國）|發音：0x00000804|筆劃數：0x00020804|  
|zh-HK|中文 （香港特別行政區）|筆劃數：0x00000c04|筆劃數：0x00020c04|  
|zh-SG|中文 (新加坡)|發音：0x00001004|筆劃數：0x00021004|  
|zh-MO|中文 (澳門特別行政區)|發音：0x00001404|筆劃數：0x00021404|  
|ja-JP|日文 （日本）|預設：0x00000411|Unicode：0x00010411|  
|ko-KR|韓文 （韓國）|預設：0x00000412|韓文 Xwansung-Unicode:0x00010412|  
|de-DE|德文 （德國）|字典中：0x00000407|電話簿排序 DIN:0x00010407|  
|hu-HU|匈牙利文 （匈牙利）|預設：0x0000040e|技術排序：0x0001040e|  
|ka-GE|喬治亞文 （喬治亞）|傳統：0x00000437|現代的排序：0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>目前的文化特性和 UWP 應用程式  
 在通用 Windows 平台 (UWP) 應用程式中，<xref:System.Globalization.CultureInfo.CurrentCulture%2A>和<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>屬性是讀寫，就如同它們在.NET Framework 和.NET Core 應用程式中。 不過，UWP 應用程式會辨識之單一文化特性。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>並<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>中的第一個值的屬性對應[Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)集合。  

在.NET Framework 和.NET Core 應用程式中目前的文化特性是每個執行緒設定，而<xref:System.Globalization.CultureInfo.CurrentCulture%2A>和<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>屬性會反映的文化特性和 UI 文化特性只有目前的執行緒。 在 UWP 應用程式，目前的文化特性會對應至[Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)集合，而這是全域設定。 設定<xref:System.Globalization.CultureInfo.CurrentCulture%2A>或<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>屬性也會變更整個應用程式的文化特性; 無法設定每個執行緒為基礎的文化特性。
  
## Examples  
 下列範例示範如何建立<xref:System.Globalization.CultureInfo>西班牙文 （西班牙） 與國際排序，而另一個物件<xref:System.Globalization.CultureInfo>傳統排序物件。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
    <related type="Article" href="/globalization/index">Go Global 開發人員中心</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Globalization.CultureInfo" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">預先定義的 <see cref="T:System.Globalization.CultureInfo" /> 識別項、現有 <see cref="T:System.Globalization.CultureInfo" /> 物件的 <see cref="P:System.Globalization.CultureInfo.LCID" /> 屬性，或 Windows 專用文化特性識別項。</param>
        <summary>根據文化特性識別項所指定的文化特性，初始化 <see cref="T:System.Globalization.CultureInfo" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預先定義的文化特性識別項所述[國家語言支援 (NLS) API 參考](https://go.microsoft.com/fwlink/?LinkId=200048)在 Go Global Developer Center。  
  
 在大部分情況下，`culture`參數對應到相對應的國家語言支援 (NLS) 地區設定識別碼。 值`culture`參數的值就會變成<xref:System.Globalization.CultureInfo.LCID%2A>屬性的新<xref:System.Globalization.CultureInfo>。  
  
 我們建議您呼叫的地區設定名稱建構函式<xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>，因為地區設定名稱是最好的 Lcid。 自訂地區設定，地區設定名稱是必要的。  
  
 使用者可能選擇覆寫一些與目前的文化特性的 Windows [控制台] 的 [地區及語言選項] 部分透過相關聯的值。 比方說，使用者可能會選擇不同的格式顯示日期，或使用文化特性的預設值以外的貨幣。 如果指定的文化特性識別項符合目前的 Windows 文化特性的文化特性識別項，這個建構函式會建立<xref:System.Globalization.CultureInfo>使用這些覆寫，包括使用者設定之屬性的<xref:System.Globalization.DateTimeFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性和屬性<xref:System.Globalization.NumberFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>(例如，如果所選行事曆不是其中一個<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>) 會定義方法的結果和屬性的值。  
  
 如果指定的文化特性識別項不符合目前的 Windows 文化特性識別項，這個建構函式會建立<xref:System.Globalization.CultureInfo>，使用指定的文化特性的預設值。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A>屬性永遠設為`true`。  
  
 例如，假設阿拉伯文 （沙烏地阿拉伯） 是目前的 Windows 文化特性，且使用者已為西曆的阿拉伯回曆中變更行事曆。  
  
-   具有`CultureInfo("0x0401")`（文化特性名稱 AR-SA），<xref:System.Globalization.CultureInfo.Calendar%2A>設為<xref:System.Globalization.GregorianCalendar>（此為使用者設定） 和<xref:System.Globalization.CultureInfo.UseUserOverride%2A>設定為`true`。  
  
-   具有`CultureInfo("0x041E")`（文化特性名稱的第個），<xref:System.Globalization.CultureInfo.Calendar%2A>設為<xref:System.Globalization.ThaiBuddhistCalendar>（這是個階的預設月曆） 及<xref:System.Globalization.CultureInfo.UseUserOverride%2A>設定為`true`。  
  
 對於使用歐元的文化特性，.NET Framework 和 Windows XP 會設定預設貨幣以歐元。 不過，舊版 Windows 則否。 因此，如果較舊版本的 Windows 使用者未變更 [貨幣] 設定，透過 [控制台] 的 [地區及語言選項] 部分，貨幣可能不正確。 若要使用之貨幣的.NET Framework 的預設設定，應用程式應該使用<xref:System.Globalization.CultureInfo>建構函式多載，接受`useUserOverride`參數並將它設定為`false`。  
  
> [!NOTE]
>  針對回溯相容性、 使用建構的文化特性`culture`必須是 0x0004 或 0x7c04 參數<xref:System.Globalization.CultureInfo.Name%2A>ZH-CHS 或 ZH-CHT，屬性分別。 您應該改為想要建構使用-Zh-hans 或 Zh-hant，目前的標準文化特性名稱的文化特性，除非您有使用較舊名稱的原因。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> 小於零。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> 不是有效的文化特性識別項。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]及更早版本會擲回<see cref="T:System.ArgumentException" />如果<paramref name="culture" />不是有效的文化特性識別項。 開頭[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，這個建構函式會擲回<see cref="T:System.Globalization.CultureNotFoundException" />。 開始執行的應用程式[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]或更新版本在 Windows 7 或更新版本中，這個方法會嘗試擷取<see cref="T:System.Globalization.CultureInfo" />物件，其識別碼為<paramref name="culture" />從作業系統; 如果作業系統不支援該文化特性，方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />例外狀況。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">預先定義的 <see cref="T:System.Globalization.CultureInfo" /> 名稱、現有 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="P:System.Globalization.CultureInfo.Name" />，或 Windows 專用文化特性名稱。 <paramref name="name" /> 不區分大小寫。</param>
        <summary>根據名稱所指定的文化特性，初始化 <see cref="T:System.Globalization.CultureInfo" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需預先定義的文化特性名稱的清單，請參閱 <<c0> [ 國家語言支援 (NLS) API 參考](https://go.microsoft.com/fwlink/?LinkId=200048)在 Go Global Developer Center。 此外，從 Windows 10，開始`name`可以是任何有效的 BCP-47 語言標記。  
  
 如果`name`已<xref:System.String.Empty?displayProperty=nameWithType>，建構函式會建立執行個體的文化特性而異; 這相當於擷取的值<xref:System.Globalization.CultureInfo.InvariantCulture%2A>屬性。  
  
 使用者可能選擇覆寫一些與目前的文化特性的 Windows [控制台] 的 [地區及語言選項] 部分透過相關聯的值。 比方說，使用者可能會選擇不同的格式顯示日期，或使用文化特性的預設值以外的貨幣。 如果文化特性識別項相關聯`name`文化特性識別項，目前的 Windows 文化特性，這個建構函式建立的相符項目<xref:System.Globalization.CultureInfo>物件，使用這些覆寫，包括使用者設定之屬性的<xref:System.Globalization.DateTimeFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性和屬性<xref:System.Globalization.NumberFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>，例如，如果所選行事曆不是其中一個<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>，不會定義方法的結果和屬性的值。  
  
 如果文化特性識別項相關聯`name`不的符合目前的 Windows 文化特性，這個建構函式的文化特性識別項建立<xref:System.Globalization.CultureInfo>使用指定的文化特性的預設值的物件。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A>屬性永遠設為`true`。  
  
 例如，假設阿拉伯文 （沙烏地阿拉伯） 是目前的文化特性的 Windows，而且使用者從回曆曆法變更為西曆。  
  
-   具有`CultureInfo("ar-SA")`，<xref:System.Globalization.CultureInfo.Calendar%2A>設為<xref:System.Globalization.GregorianCalendar>（此為使用者設定） 和<xref:System.Globalization.CultureInfo.UseUserOverride%2A>設定為`true`。  
  
-   具有`CultureInfo("th-TH")`，<xref:System.Globalization.CultureInfo.Calendar%2A>設為<xref:System.Globalization.ThaiBuddhistCalendar>（這是個階的預設月曆） 及<xref:System.Globalization.CultureInfo.UseUserOverride%2A>設定為`true`。  
  
 <xref:System.Globalization.CultureInfo.LCID%2A>屬性的新<xref:System.Globalization.CultureInfo>設為具有指定名稱相關聯的文化特性識別項。  
  
 對於使用歐元的文化特性，.NET Framework 和 Windows XP 會設定預設貨幣以歐元。 不過，舊版的 Windows 不要這樣。 因此，如果較舊版本的 Windows 使用者未變更 [貨幣] 設定，透過 [控制台] 的 [地區及語言選項] 部分，貨幣可能不正確。 若要使用之貨幣的.NET Framework 的預設設定，應用程式應該使用<xref:System.Globalization.CultureInfo>建構函式多載，接受`useUserOverride`參數並將它設定為`false`。  
  
   
  
## Examples  
 下列範例會擷取目前文化特性。 如果是法文 （法國） 文化特性以外的任何項目，它會呼叫<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>建構函式來具現化<xref:System.Globalization.CultureInfo>代表法文 （法國） 文化特性，並使其成為目前執行緒文化特性的物件。 否則，它會具現化<xref:System.Globalization.CultureInfo>代表法文 （盧森堡） 文化特性，並使其成為目前的文化特性的物件。  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 為 null。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> 不是有效的文化特性名稱。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]及更早版本會擲回<see cref="T:System.ArgumentException" />如果<paramref name="name" />不是有效的文化特性名稱。 開頭[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，這個建構函式會擲回<see cref="T:System.Globalization.CultureNotFoundException" />。 開始執行的應用程式[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]或更新版本在 Windows 7 或更新版本中，這個方法會嘗試擷取<see cref="T:System.Globalization.CultureInfo" />物件，其識別碼為<paramref name="name" />從作業系統中; 如果作業系統不支援該文化特性，而且<paramref name="name" />不是補充或取代文化特性名稱，則方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />例外狀況。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (culture, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="useUserOverride" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">預先定義的 <see cref="T:System.Globalization.CultureInfo" /> 識別項、現有 <see cref="T:System.Globalization.CultureInfo" /> 物件的 <see cref="P:System.Globalization.CultureInfo.LCID" /> 屬性，或 Windows 專用文化特性識別項。</param>
        <param name="useUserOverride">代表使用使用者選取的文化特性設定 (<see langword="true" />) 或預設文化特性設定 (<see langword="false" />) 的布林值。</param>
        <summary>根據文化特性識別項所指定的文化特性，並根據指定是否要使用系統中使用者選取的文化特性設定的布林值，初始化 <see cref="T:System.Globalization.CultureInfo" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預先定義的文化特性識別項所述[國家語言支援 (NLS) API 參考](https://go.microsoft.com/fwlink/?LinkId=200048)在 Go Global Developer Center。  
  
 在大部分情況下，`culture`參數對應到相對應的國家語言支援 (NLS) 地區設定識別碼。 值`culture`參數的值就會變成<xref:System.Globalization.CultureInfo.LCID%2A>屬性的新<xref:System.Globalization.CultureInfo>。  
  
 我們建議您呼叫的地區設定名稱建構函式<xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>，因為地區設定名稱是最好的 Lcid。 自訂地區設定，地區設定名稱是必要的。  
  
 使用者可能選擇覆寫一些與目前的文化特性的 Windows [控制台] 的 [地區及語言選項] 部分透過相關聯的值。 比方說，使用者可能會選擇不同的格式顯示日期，或使用文化特性的預設值以外的貨幣。  
  
 應用程式應該通常不允許使用者覆寫。 請注意，不允許覆寫也不保證資料穩定性;請參閱部落格文章[文化特性的資料不應該被視為穩定 （但非變異）](https://go.microsoft.com/fwlink/?LinkId=156850)。  
  
 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A>屬性設定為`true`指定的文化特性識別項符合目前的 Windows 文化特性識別項，這個建構函式會建立<xref:System.Globalization.CultureInfo>使用這些覆寫，包括使用者設定的屬性<xref:System.Globalization.DateTimeFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性和屬性<xref:System.Globalization.NumberFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>，例如，如果所選行事曆不是其中一個<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>，不會定義方法的結果和屬性的值。  
  
 否則，這個建構函式會建立<xref:System.Globalization.CultureInfo>，使用指定的文化特性的預設值。  
  
 值`useUserOverride`參數的值就會變成<xref:System.Globalization.CultureInfo.UseUserOverride%2A>屬性。  
  
 例如，假設阿拉伯文 （沙烏地阿拉伯） 是目前的文化特性的 Windows，而且使用者已變更從回曆行事曆為西曆。  
  
-   具有`CultureInfo("0x0401", true)`（文化特性名稱 AR-SA），<xref:System.Globalization.CultureInfo.Calendar%2A>設為<xref:System.Globalization.GregorianCalendar>（此為使用者設定） 和<xref:System.Globalization.CultureInfo.UseUserOverride%2A>設定為`true`。  
  
-   具有`CultureInfo("0x0401", false)`（文化特性名稱 AR-SA），<xref:System.Globalization.CultureInfo.Calendar%2A>設為<xref:System.Globalization.HijriCalendar>（此為預設的行事曆 ar sa） 和<xref:System.Globalization.CultureInfo.UseUserOverride%2A>設定為`false`。  
  
-   具有`CultureInfo("0x041E", true)`（文化特性名稱的第個），<xref:System.Globalization.CultureInfo.Calendar%2A>設為<xref:System.Globalization.ThaiBuddhistCalendar>（這是個階的預設月曆） 及<xref:System.Globalization.CultureInfo.UseUserOverride%2A>設定為`true`。  
  
-   具有`CultureInfo("0x041E", false)`（文化特性名稱的第個），<xref:System.Globalization.CultureInfo.Calendar%2A>設為<xref:System.Globalization.ThaiBuddhistCalendar>（這是個階的預設月曆） 及<xref:System.Globalization.CultureInfo.UseUserOverride%2A>設定為`false`。  
  
 對於使用歐元的文化特性，.NET Framework 和 Windows XP 會設定預設貨幣以歐元。 不過，舊版 Windows 則否。 因此，如果較舊版本的 Windows 使用者未變更 [貨幣] 設定，透過 [控制台] 的 [地區及語言選項] 部分，貨幣可能不正確。 若要使用之貨幣的.NET Framework 的預設設定，應用程式應該設定`useUserOverride`參數來`false`。  
  
> [!NOTE]
>  針對回溯相容性、 使用建構的文化特性`culture`必須是 0x0004 或 0x7c04 參數<xref:System.Globalization.CultureInfo.Name%2A>ZH-CHS 或 ZH-CHT，屬性分別。 您應該改為想要建構使用-Zh-hans 或 Zh-hant，目前的標準文化特性名稱的文化特性，除非您有使用較舊名稱的原因。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> 小於零。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> 不是有效的文化特性識別項。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]及更早版本會擲回<see cref="T:System.ArgumentException" />如果<paramref name="culture" />不是有效的文化特性識別項。 開頭[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，這個建構函式會擲回<see cref="T:System.Globalization.CultureNotFoundException" />。 開始執行的應用程式[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]或更新版本在 Windows 7 或更新版本中，這個方法會嘗試擷取<see cref="T:System.Globalization.CultureInfo" />物件，其識別碼為<paramref name="culture" />從作業系統; 如果作業系統不支援該文化特性，方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />例外狀況。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (name, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="useUserOverride" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">預先定義的 <see cref="T:System.Globalization.CultureInfo" /> 名稱、現有 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="P:System.Globalization.CultureInfo.Name" />，或 Windows 專用文化特性名稱。 <paramref name="name" /> 不區分大小寫。</param>
        <param name="useUserOverride">代表使用使用者選取的文化特性設定 (<see langword="true" />) 或預設文化特性設定 (<see langword="false" />) 的布林值。</param>
        <summary>根據名稱所指定的文化特性，並根據指示是否要從系統中使用使用者選取的文化特性設定的布林值，初始化 <see cref="T:System.Globalization.CultureInfo" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需預先定義的文化特性名稱的清單，請參閱 <<c0> [ 國家語言支援 (NLS) API 參考](https://go.microsoft.com/fwlink/?LinkId=200048)在 Go Global Developer Center。 此外，從 Windows 10，開始`name`可以是任何有效的 BCP-47 語言標記。  
  
 如果`name`已<xref:System.String.Empty?displayProperty=nameWithType>，建構函式會建立執行個體的文化特性而異; 這相當於擷取的值<xref:System.Globalization.CultureInfo.InvariantCulture%2A>屬性。  
  
 使用者可能選擇覆寫一些透過 [控制台] 的 [地區及語言選項] 部分的目前 Windows 文化特性相關聯的值。 比方說，使用者可能會選擇不同的格式顯示日期，或使用文化特性的預設值以外的貨幣。  
  
 應用程式應該通常不允許使用者覆寫。 請注意，不允許覆寫也不保證資料穩定性;請參閱部落格文章[文化特性的資料不應該被視為穩定 （但非變異）](https://go.microsoft.com/fwlink/?LinkId=156850)。  
  
 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A>屬性設定為`true`並與指定的文化特性名稱相關聯的文化特性識別項符合目前的 Windows 文化特性的文化特性識別項，這個建構函式會建立<xref:System.Globalization.CultureInfo>使用這些覆寫包括使用者設定的屬性<xref:System.Globalization.DateTimeFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性和屬性<xref:System.Globalization.NumberFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>，例如，如果所選行事曆不是其中一個<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>，不會定義方法的結果和屬性的值。  
  
 否則，這個建構函式會建立<xref:System.Globalization.CultureInfo>，使用指定的文化特性的預設值。  
  
 值`useUserOverride`參數的值就會變成<xref:System.Globalization.CultureInfo.UseUserOverride%2A>屬性。  
  
 例如，假設阿拉伯文 （沙烏地阿拉伯） 是目前的文化特性的 Windows，而且使用者從回曆曆法變更為西曆。  
  
-   具有`CultureInfo("ar-SA", true)`，<xref:System.Globalization.CultureInfo.Calendar%2A>設為<xref:System.Globalization.GregorianCalendar>（此為使用者設定） 和<xref:System.Globalization.CultureInfo.UseUserOverride%2A>設定為`true`。  
  
-   具有`CultureInfo("ar-SA", false)`，<xref:System.Globalization.CultureInfo.Calendar%2A>設為<xref:System.Globalization.HijriCalendar>（此為預設的行事曆 ar sa） 和<xref:System.Globalization.CultureInfo.UseUserOverride%2A>設定為`false`。  
  
-   具有`CultureInfo("th-TH", true)`，<xref:System.Globalization.CultureInfo.Calendar%2A>設為<xref:System.Globalization.ThaiBuddhistCalendar>（這是個階的預設月曆） 及<xref:System.Globalization.CultureInfo.UseUserOverride%2A>設定為`true`。  
  
-   具有`CultureInfo("th-TH", false)`，<xref:System.Globalization.CultureInfo.Calendar%2A>設為<xref:System.Globalization.ThaiBuddhistCalendar>（這是個階的預設月曆） 及<xref:System.Globalization.CultureInfo.UseUserOverride%2A>設定為`false`。  
  
 <xref:System.Globalization.CultureInfo.LCID%2A>屬性的新<xref:System.Globalization.CultureInfo>設為具有指定名稱相關聯的文化特性識別項。  
  
 對於使用歐元的文化特性，.NET Framework 和 Windows XP 會設定預設貨幣以歐元。 不過，舊版的 Windows 不要這樣。 因此，如果較舊版本的 Windows 使用者未變更 [貨幣] 設定，透過 [控制台] 的 [地區及語言選項] 部分，貨幣可能不正確。 若要使用之貨幣的.NET Framework 的預設設定，應用程式應該設定`useUserOverride`參數來`false`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 為 null。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> 不是有效的文化特性名稱。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]及更早版本會擲回<see cref="T:System.ArgumentException" />如果<paramref name="name" />不是有效的文化特性名稱。 開頭[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，這個建構函式會擲回<see cref="T:System.Globalization.CultureNotFoundException" />。 開始執行的應用程式[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]或更新版本在 Windows 7 或更新版本中，這個方法會嘗試擷取<see cref="T:System.Globalization.CultureInfo" />物件，其識別碼為<paramref name="name" />從作業系統中; 如果作業系統不支援該文化特性，而且<paramref name="name" />不是補充或取代文化特性名稱，則方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />例外狀況。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar" Usage="System.Globalization.CultureInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得文化特性使用的預設曆法。</summary>
        <value><see cref="T:System.Globalization.Calendar" />，代表文化特性所使用的預設曆法。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用者可能選擇覆寫一些與目前的文化特性的 Windows [控制台] 的 [地區及語言選項] 部分透過相關聯的值。 比方說，使用者可能會選擇不同的格式顯示日期，或使用文化特性的預設值以外的貨幣。  
  
 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A>已`true`和指定的文化特性相符的 Windows，目前的文化特性<xref:System.Globalization.CultureInfo>會使用這些覆寫，包括使用者設定之屬性的<xref:System.Globalization.DateTimeFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性，和資料庫屬性<xref:System.Globalization.NumberFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>，例如，如果所選行事曆不是其中一個<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>，不會定義方法的結果和屬性的值。  
  
 因此，如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A>是`true`，這個屬性的值可能與不同文化特性所使用的預設曆法。  
  
 您的應用程式會變更目前所使用的行事曆<xref:System.Globalization.CultureInfo>藉由設定<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>，這是執行個體<xref:System.Globalization.DateTimeFormatInfo>類別。 新的行事曆必須是其中一項中所列的行事曆<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 也包含 自訂日期和時間格式的相關聯的其他屬性<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberSignature Language="F#" Value="member this.ClearCachedData : unit -&gt; unit" Usage="cultureInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重新整理已快取的文化特性相關資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 資訊，例如預設文化特性和格式模式中，會快取要求的第一次。 存留期間，可以變更資訊<xref:System.AppDomain>，比方說，當使用者修改 [控制台] 的 [地區及語言選項] 部分。 不過，<xref:System.Globalization.CultureInfo>類別不會自動偵測變更系統設定 中。  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A>方法會清除的快取<xref:System.Globalization.CultureInfo>所建立的物件<xref:System.Globalization.CultureInfo.GetCultureInfo%2A>，並重新整理中的資訊<xref:System.Globalization.CultureInfo.CurrentCulture%2A>， <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>，和<xref:System.Globalization.RegionInfo.CurrentRegion%2A>根據目前的系統設定的屬性。  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A>方法不會重新整理中的資訊<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>現有的執行緒屬性。 不過，未來的執行緒會有任何新<xref:System.Globalization.CultureInfo>屬性值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="cultureInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立目前 <see cref="T:System.Globalization.CultureInfo" /> 的複本。</summary>
        <returns>目前 <see cref="T:System.Globalization.CultureInfo" /> 的複本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複製為可寫入即使原始<xref:System.Globalization.CultureInfo>處於唯讀狀態。 因此，您可修改複製品的屬性。  
  
 物件的淺層複本是物件的一份只有。 如果物件包含其他物件的參考，則淺層複製不會建立參考物件的複本。 它改為參考原始物件。 相較之下，物件的深層複本建立一份物件和一份直接或間接參考該物件的所有項目。  
  
 <xref:System.Globalization.CultureInfo.Clone%2A>方法會建立增強的淺層複本。 所傳回的物件<xref:System.Globalization.CultureInfo.NumberFormat%2A>， <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>， <xref:System.Globalization.CultureInfo.TextInfo%2A>，和<xref:System.Globalization.CultureInfo.Calendar%2A>屬性也會被複製。 因此，複製<xref:System.Globalization.CultureInfo>物件可以修改其複製的內容，而不會影響原始<xref:System.Globalization.CultureInfo>物件。  
  
   
  
## Examples  
 下列程式碼範例示範 CultureInfo.Clone 也複製<xref:System.Globalization.DateTimeFormatInfo>並<xref:System.Globalization.NumberFormatInfo>相關聯的執行個體<xref:System.Globalization.CultureInfo>。  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo" Usage="System.Globalization.CultureInfo.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Globalization.CompareInfo" />，定義此文化特性如何比較字串。</summary>
        <value><see cref="T:System.Globalization.CompareInfo" />，定義此文化特性如何比較字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CompareInfo%2A>屬性會傳回<xref:System.Globalization.CompareInfo>提供區分文化特性的排序和字串比較作業中使用的特定文化特性資訊的物件。  
  
 使用者可能選擇覆寫一些與目前的文化特性的 Windows [控制台] 的 [地區及語言選項] 部分透過相關聯的值。 比方說，使用者可能會選擇不同的格式顯示日期，或使用文化特性的預設值以外的貨幣。  
  
 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A>已`true`和指定的文化特性相符的 Windows，目前的文化特性<xref:System.Globalization.CultureInfo>會使用這些覆寫，包括使用者設定之屬性的<xref:System.Globalization.DateTimeFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性，和資料庫屬性<xref:System.Globalization.NumberFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>，例如，如果所選行事曆不是其中一個<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>，不會定義方法的結果和屬性的值。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立<xref:System.Globalization.CultureInfo>西班牙文 （西班牙） 與國際排序，而另一個<xref:System.Globalization.CultureInfo>與傳統的排序。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member CreateSpecificCulture : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CreateSpecificCulture name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">預先定義的 <see cref="T:System.Globalization.CultureInfo" /> 名稱或現有 <see cref="T:System.Globalization.CultureInfo" /> 物件的名稱。 <paramref name="name" /> 不區分大小寫。</param>
        <summary>建立 <see cref="T:System.Globalization.CultureInfo" />，代表與指定名稱相關的特定文化特性。</summary>
        <returns><see cref="T:System.Globalization.CultureInfo" /> 物件，代表： 
如果 <paramref name="name" /> 是空字串 ("")，則為不因文化特性而異 (Invariant Culture)。  
  
-或- 
如果 <paramref name="name" /> 是中性文化特性，則為與 <paramref name="name" /> 關聯的特定文化特性。  
  
-或- 
如果 <paramref name="name" /> 已經是特定文化特性，則為 <paramref name="name" /> 所指定的文化特性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>方法會包裝對<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>建構函式。  
  
> [!NOTE]
>  如需預先定義的文化特性名稱的清單，請參閱 <<c0> [ 國家語言支援 (NLS) API 參考](https://go.microsoft.com/fwlink/?LinkId=200048)在 Go Global Developer Center。 此外，從 Windows 10，開始`name`可以是任何有效的 BCP-47 語言標記。  
  
 文化特性會分組為三個集合： 文化特性而異，中性文化特性和特定文化特性。 如需詳細資訊，請參閱說明<xref:System.Globalization.CultureInfo>類別。  
  
 如果這個方法所傳回的特定文化特性的文化特性識別項符合目前的 Windows 文化特性的文化特性識別項，這個方法會建立<xref:System.Globalization.CultureInfo>會使用 Windows 的文化特性的物件會覆寫。 覆寫包含使用者設定的屬性<xref:System.Globalization.DateTimeFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性並<xref:System.Globalization.NumberFormatInfo>所傳回的物件<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 若要具現化<xref:System.Globalization.CultureInfo>物件，使用預設文化特性設定而不是使用者覆寫時，呼叫<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>建構函式值是`false`的`useUserOverride`引數。  
  
 雖然<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>方法名稱包含 「 特定 」 一詞，請記住，文化特性的資料可以變更之間的版本中，或因為自訂文化特性，或因為使用者覆寫。 使用文化特性而異或二進位或固定的形式來儲存資料。  
  
   
  
## Examples  
 下列範例會擷取陣列<xref:System.Globalization.CultureInfo>物件以代表中性文化特性，從<xref:System.Globalization.CultureInfo.GetCultures%2A>方法，並排序陣列。 當它逐一查看陣列中的項目時，會傳遞至每個中性文化特性名稱<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>方法並顯示由方法傳回的特定文化特性的名稱。  
  
> [!NOTE]
>  此範例會使用 ZH-CHS 和 ZH-CHT 文化特性名稱。 不過，目標 Windows Vista 和更新版本應使用而不是 ZH-CHS 和 Zh-hant 而不是 ZH-CHT-Zh-hans 的應用程式。 -Zh-hans 與 Zh-hant 代表目前的標準，應該使用，除非您有使用較舊名稱的原因。  
>   
>  也請注意，範例的結果可能不同的是中文 （繁體） 中性文化特性 （zh、 ZH-CHT 或 Zh-hant） 輸入傳回 ZH-TW 的所在的台灣 Windows 安裝上。  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> 不是有效的文化特性名稱。  
  
-或- 
<paramref name="name" /> 所指定的文化特性沒有相關聯的特定文化特性。</exception>
        <exception cref="T:System.NullReferenceException"><paramref name="name" /> 為 null。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]及更早版本會擲回<see cref="T:System.ArgumentException" />如果<paramref name="name" />不是有效的文化特性名稱。 開頭[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，此方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />。</para></block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureInfo.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得和目前 <see cref="T:System.Globalization.CultureInfo" /> 物件關聯的文化特性類型。</summary>
        <value>一或多個 <see cref="T:System.Globalization.CultureTypes" /> 值的位元組合。 它沒有預設值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例示範<xref:System.Globalization.CultureTypes>列舉型別和<xref:System.Globalization.CultureInfo.CultureTypes%2A>屬性。  
  
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Globalization.CultureInfo" /> 物件，這個物件代表目前執行緒使用的文化特性。</summary>
        <value>物件，代表目前執行緒使用的文化特性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo>這個屬性會傳回的物件和其相關聯的物件判斷預設格式的日期、 時間、 數字、 貨幣值，排序順序的文字、 大小寫慣例，以及字串比較。  
  
 目前的文化特性是執行中執行緒的屬性。 擷取的值<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>屬性相當於更多高效能的擷取<xref:System.Globalization.CultureInfo>所傳回的物件`Thread.CurrentThread.CurrentCulture`屬性。
  
> [!NOTE]
>  在.NET Framework 4.5.2 和舊版中，<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性是唯讀的; 也就是說，您可以擷取屬性值，但您無法將它設定。 若要變更目前的文化特性，您指派<xref:System.Globalization.CultureInfo>物件，表示新的文化特性`Thread.CurrentThread.CurrentCulture`屬性。 開頭[!INCLUDE[net_v46](~/includes/net-v46-md.md)]，則<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性是讀寫; 您可設定和擷取屬性的值。 如果您沒有設定屬性值為<xref:System.Globalization.CultureInfo>物件，表示新的文化特性的值`Thread.CurrentThread.CurrentCulture`屬性也會變更。  
  
 本節內容：  
  
 [如何判斷執行緒的文化特性](#ThreadCulture)   
 [取得目前的文化特性](#Getting)   
 [明確設定 CurrentCulture 屬性](#ExplicitSetting)   
 [目前的文化特性和使用者覆寫](#Overrides)   
 [文化特性和 Windows 應用程式](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>如何判斷執行緒的文化特性  
 在執行緒啟動時，其文化特性是一開始決定，如下所示：  
  
-   藉由擷取所指定的文化特性<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>執行緒正在其中執行，如果屬性值不是應用程式定義域中的屬性`null`。  
  
-   如果執行緒集區執行緒執行工作為基礎的非同步作業和應用程式目標[!INCLUDE[net_v46](~/includes/net-v46-md.md)]或更新版本的.NET Framework 中，其文化特性取決於呼叫執行緒的文化特性。  下列範例將目前的文化特性變更為葡萄牙文 （巴西），並啟動六個工作，其中每一個會顯示其執行緒 ID、 其工作識別碼和其目前的文化特性。 每個工作 （執行緒） 有繼承呼叫執行緒的文化特性。  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     如需詳細資訊，請參閱 「 文化特性和以工作為基礎的非同步作業 > 一節中<xref:System.Globalization.CultureInfo>主題。  
  
-   藉由呼叫 Windows`GetUserDefaultLocaleName`函式。  
  
 請注意，是否您設定特定的文化特性不同的系統安裝的文化特性或使用者的慣用文化特性，而且您的應用程式會啟動多個執行緒，這些執行緒的目前文化特性，將會是所傳回的文化特性`GetUserDefaultLocaleName`函式，除非您將指定的文化特性<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>執行緒正在執行的應用程式定義域中的屬性。  
  
 如需有關如何判斷執行緒的文化特性的詳細資訊，請參閱中的 < 文化特性和執行緒 > 一節<xref:System.Globalization.CultureInfo>參考頁面。  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>取得目前的文化特性  
 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>屬性是每個執行緒設定，也就是每個執行緒可以有它自己的文化特性。 您所擷取的值取得目前執行緒的文化特性<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>屬性，如下列範例說明。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 您也可以擷取從目前執行緒的文化特性值<xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType>屬性。  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>明確設定 CurrentCulture 屬性  
 繼續[!INCLUDE[net_v46](~/includes/net-v46-md.md)]，以變更現有的執行緒，使用的文化特性設定<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>為新的文化特性的屬性。 如果您明確變更執行緒的文化特性，如此一來，變更會保存如果執行緒跨越應用程式定義域界限。 下列範例會變更目前執行緒文化特性為荷蘭文 （荷蘭）。 它也會顯示，當目前的執行緒跨越應用程式定義域界限，其目前的文化特性會保持變更。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  變更使用的文化特性<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>屬性需要<xref:System.Security.Permissions.SecurityPermission>具有權限<xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread>值的設定。 操作執行緒有危險，因為與執行緒相關聯的安全性狀態。 因此，只有可靠的程式碼，然後必要時，才應指定此權限。 您無法變更非完全信任的程式碼中的執行緒文化特性。  
  
 從開始[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，您可以明確地變更目前執行緒文化特性 （例如，法文 （加拿大）） 的特定文化特性或中性文化特性 （例如，法文）。 當<xref:System.Globalization.CultureInfo>物件都代表中性文化特性的值<xref:System.Globalization.CultureInfo>屬性，例如<xref:System.Globalization.CultureInfo.Calendar%2A>， <xref:System.Globalization.CultureInfo.CompareInfo%2A>， <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>， <xref:System.Globalization.CultureInfo.NumberFormat%2A>，和<xref:System.Globalization.CultureInfo.TextInfo%2A>反映相關聯的特定文化特性中性文化特性。 例如，英文的中性文化特性的主要文化特性是英文 （美國）;主控項的文化特性，德文文化特性是德文 （德國）。 下列範例說明格式化當目前的文化特性設定為特定文化特性、 法文 （加拿大） 和中性文化特性，差異法文。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 您也可以使用<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>屬性連同<xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType>屬性來設定<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性的 ASP.NET 應用程式給使用者的慣用文化特性，如下列範例所示。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>目前的文化特性和使用者覆寫  
 Windows 可讓使用者覆寫的標準屬性值<xref:System.Globalization.CultureInfo>物件和其相關聯的物件，使用**地區及語言選項**控制項台中。 <xref:System.Globalization.CultureInfo>所傳回的物件<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性會反映這些使用者覆寫在下列情況：  
  
-   如果由 Windows 隱含設定目前執行緒文化特性`GetUserDefaultLocaleName`函式。  
  
-   如果目前執行緒文化特性所定義<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>屬性會對應至目前的 Windows 系統文化特性。  
  
-   如果目前執行緒文化特性設定明確地為所傳回的文化特性<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>方法和文化特性與目前的 Windows 系統文化特性。  
  
-   如果目前執行緒文化特性設明確具現化的文化特性<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>建構函式，和文化特性與目前的 Windows 系統文化特性。  
  
 在某些情況下，特別是針對伺服器應用程式，將目前的文化特性設定為<xref:System.Globalization.CultureInfo>可能不會反映使用者覆寫的物件。 相反地，您可以將目前執行緒文化特性設定為<xref:System.Globalization.CultureInfo>不會反映使用者的物件會覆寫，以下列方式：  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>建構函式的值`false`如`useUserOverride`引數。  
  
-   藉由呼叫<xref:System.Globalization.CultureInfo.GetCultureInfo%2A>方法，以傳回快取，唯讀<xref:System.Globalization.CultureInfo>物件。  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>目前的文化特性和 UWP 應用程式  
 在通用 Windows 平台 (UWP) 應用程式，<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性是讀寫，就如同它是.NET Framework 和.NET Core 應用程式中，您可以使用它來取得和設定目前的文化特性。 不過，UWP 應用程式無法區分目前的文化特性與目前的 UI 文化特性。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>並<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>中的第一個值的屬性對應[Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)集合。  

在.NET Framework 和.NET Core 應用程式中目前的文化特性是每個執行緒設定，而<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性會反映目前執行緒的文化特性。 在 UWP 應用程式，目前的文化特性會對應至[Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)屬性，這是一種全域設定。 設定<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性也會變更整個應用程式的文化特性; 無法設定每個執行緒為基礎的文化特性。
  
## Examples  
 下列範例示範如何變更<xref:System.Globalization.CultureInfo.CurrentCulture%2A>和<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>目前執行緒。  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">該屬性設定為 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用來設定目前的文化特性。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Globalization.CultureInfo" /> 物件，此物件代表 Resource Manager 用於執行階段查詢特定文化特性資源的目前使用者介面文化特性。</summary>
        <value>資源管理員用來在執行階段查詢特定文化特性資源的文化特性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前的 UI 文化特性是每個執行緒屬性。 也就是每個執行緒都有它自己的目前 UI 文化特性。 這個屬性就相當於擷取，或開頭[!INCLUDE[net_v46](~/includes/net-v46-md.md)]，將<xref:System.Globalization.CultureInfo>物件指派給`System.Threading.Thread.CurrentThread.CurrentUICulture`屬性。 在執行緒啟動時，其 UI 文化特性是一開始決定，如下所示：  
  
-   藉由擷取所指定的文化特性<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>執行緒正在其中執行，如果屬性值不是應用程式定義域中的屬性`null`。  
  
-   如果執行緒集區執行緒執行工作為基礎的非同步作業和應用程式目標[!INCLUDE[net_v46](~/includes/net-v46-md.md)]或更新版本的.NET Framework 中，其 UI 文化特性取決於呼叫執行緒 UI 文化特性。  下列範例會變成葡萄牙文 （巴西） 中的目前 UI 文化特性，並啟動六個工作，其中每一個會顯示其執行緒 ID、 其工作識別碼和其目前的 UI 文化特性。 每個工作 （執行緒） 有繼承呼叫執行緒 UI 文化特性。  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     如需詳細資訊，請參閱 「 文化特性和以工作為基礎的非同步作業 > 一節中<xref:System.Globalization.CultureInfo>主題。  
  
-   藉由呼叫 Windows`GetUserDefaultUILanguage`函式。  
  
> [!NOTE]
>  在  [!INCLUDE[Compact](~/includes/compact-md.md)]，則<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>屬性是唯讀的。 目前的 UI 文化特性會取決於系統的地區設定，而且不能以程式設計方式變更。  
  
 開頭[!INCLUDE[net_v46](~/includes/net-v46-md.md)]，若要變更的使用者介面文化特性使用的執行緒，設定<xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>為新的文化特性的屬性。 如果您明確變更執行緒的 UI 文化特性，如此一來，變更會保存如果執行緒跨越應用程式定義域界限。  
  
> [!NOTE]
>  在.NET Framework 4.5.2 和舊版中，<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>屬性是唯讀的; 也就是說，您可以擷取屬性值，但您無法將它設定。 若要變更目前的 UI 文化特性，您指派<xref:System.Globalization.CultureInfo>物件，表示新的 UI 文化特性，以`Thread.CurrentThread.CurrentUICulture`屬性。 開頭[!INCLUDE[net_v46](~/includes/net-v46-md.md)]，則<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>屬性是讀寫; 您可設定和擷取屬性的值。 如果您沒有設定屬性值為<xref:System.Globalization.CultureInfo>物件，表示新的文化特性的值`Thread.CurrentThread.CurrentCulture`屬性也會變更。  
  
 本節內容：  
  
 [取得目前的 UI 文化特性](#Getting)   
 [明確地設定目前 UI 文化特性](#Explicit)   
 [隱含地設定目前 UI 文化特性](#Implicit)   
 [安全性考量](#Security)   
 [目前的 UI 文化特性和 Windows 應用程式](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>取得目前的 UI 文化特性  
 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>屬性是每個執行緒設定，也就是每個執行緒可以有它自己的 UI 文化特性。 您所擷取的值取得目前的執行緒 UI 文化特性<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>屬性，如下列範例說明。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 您也可以擷取從目前的執行緒 UI 文化特性值<xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>屬性。  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>明確地設定目前 UI 文化特性  
 開頭[!INCLUDE[net_v46](~/includes/net-v46-md.md)]，您可以藉由指派變更的目前 UI 文化特性<xref:System.Globalization.CultureInfo>物件，表示新的文化特性<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>屬性。 可以設定目前 UI 文化特性，可能是特定文化特性 （例如 EN-US 或 DE-DE） 或中性文化特性 （例如 en-us 或 de）。 下列範例會設定目前 UI 文化特性為 FR-FR 或法文 （法國）。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 在多執行緒應用程式中，您可以明確地設定 UI 文化特性的任何執行緒指派<xref:System.Globalization.CultureInfo>物件，表示執行緒的文化特性的<xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType>屬性。 如果您想要設定的文化特性是目前的執行緒，您可以指派至新的文化特性<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>屬性。 當執行緒 UI 文化特性已明確設定，即使跨越應用程式定義域界限，並在另一個應用程式定義域中執行的程式碼的執行緒會保留相同的文化特性。  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>隱含地設定目前 UI 文化特性  
 當執行緒，包括主應用程式執行緒，第一次，依預設會建立其目前的 UI 文化特性設定，如下所示：  
  
-   使用所定義的文化特性<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>目前的應用程式定義域如果屬性值不是屬性`null`。  
  
-   使用系統的預設文化特性。 在使用 Windows 作業系統的系統中，通用語言執行平台會呼叫 Windows`GetUserDefaultUILanguage`函式來設定目前 UI 文化特性。 `GetUserDefaultUILanguage` 傳回使用者所設定的預設 UI 文化特性。 如果使用者未設定預設 UI 語言，它會傳回原先安裝在系統上的文化特性。  
  
 如果執行緒跨越應用程式界限，並在另一個應用程式定義域中執行的程式碼，其文化特性會判斷為新建立執行緒的相同的方式。  
  
 請注意，如果您設定特定的 UI 文化特性的系統安裝的 UI 文化特性不同或使用者偏好的 UI 文化特性，且您的應用程式會啟動多個執行緒，這些執行緒的目前 UI 文化特性的文化特性，傳回`GetUserDefaultUILanguage`函式，除非您將指定的文化特性<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>執行緒正在執行的應用程式定義域中的屬性。  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>安全性考量  
 變更目前執行緒文化特性，您必須<xref:System.Security.Permissions.SecurityPermission>具有權限<xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread>值的設定。  
  
> [!CAUTION]
>  操作執行緒有危險，因為與執行緒相關聯的安全性狀態。 因此，只有可靠的程式碼，然後必要時，才應指定此權限。 您無法變更非完全信任的程式碼中的執行緒文化特性。  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>目前 UI 文化特性和 UWP 應用程式  
 
在通用 Windows 平台 (UWP) 應用程式，<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>屬性是讀寫，就如同它是.NET Framework 和.NET Core 應用程式中，您可以使用它來取得和設定目前的文化特性。 不過，UWP 應用程式無法區分目前的文化特性與目前的 UI 文化特性。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>並<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>中的第一個值的屬性對應[Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)集合。

在.NET Framework 和.NET Core 應用程式中的目前 UI 文化特性是每個執行緒設定，而<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>屬性會反映目前執行緒的 UI 文化特性。 在 UWP 應用程式，目前的文化特性會對應至[Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)屬性，這是一種全域設定。 設定<xref:System.Globalization.CultureInfo.CurrentCulture%2A>屬性也會變更整個應用程式的文化特性; 無法設定每個執行緒為基礎的文化特性。    
  
## Examples  
 下列程式碼範例示範如何變更<xref:System.Globalization.CultureInfo.CurrentCulture%2A>和<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>目前執行緒。  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">該屬性設定為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">此屬性設為無法用來尋找資源檔的文化特性名稱。 資源檔名稱只能包含字母、數字、連字號或底線。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用來設定目前 UI 文化特性。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Globalization.DateTimeFormatInfo" />，定義日期和時間在文化特性上適當的顯示格式。</summary>
        <value><see cref="T:System.Globalization.DateTimeFormatInfo" />，定義日期和時間在文化特性上適當的顯示格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 使用者可能選擇覆寫一些與目前的文化特性的 Windows [控制台] 的 [地區及語言選項] 部分透過相關聯的值。 比方說，使用者可能會選擇不同的格式顯示日期，或使用文化特性的預設值以外的貨幣。  
  
 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A>已`true`和指定的文化特性相符的 Windows，目前的文化特性<xref:System.Globalization.CultureInfo>會使用這些覆寫，包括使用者設定之屬性的<xref:System.Globalization.DateTimeFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性，和資料庫屬性<xref:System.Globalization.NumberFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>，例如，如果所選行事曆不是其中一個<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>，不會定義方法的結果和屬性的值。  
  
 值<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性和<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性則不會計算直到您的應用程式存取的屬性。 使用者時執行的應用程式，然後再應用程式的存取，如果可以變更目前的文化特性為新的文化特性<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>或<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性，應用程式會擷取新的文化特性，而不是覆寫的預設值原始的文化特性。 若要保留原始的目前文化特性的覆寫，應該存取的應用程式<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>和<xref:System.Globalization.CultureInfo.NumberFormat%2A>之前變更目前的文化特性的屬性。  
  
   
  
## Examples  
 下列程式碼範例示範 CultureInfo.Clone 也複製<xref:System.Globalization.DateTimeFormatInfo>並<xref:System.Globalization.NumberFormatInfo>相關聯的執行個體<xref:System.Globalization.CultureInfo>。  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">此屬性設定為 null。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 屬性或任何 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 屬性已設定，而且 <see cref="T:System.Globalization.CultureInfo" /> 是唯讀的。</exception>
        <block subset="none" type="usage"><para>如果<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />是<see cref="T:System.Globalization.TaiwanCalendar" />但<see cref="P:System.Threading.Thread.CurrentCulture" />不設定為中文 （台灣），名為 ZH-TW，然後<see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />， <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />，和<see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />傳回空字串 ("")。</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前應用程式定義域中之執行緒的預設文化特性。</summary>
        <value>在目前的應用程式定義域中為執行緒的預設文化特性，若目前的系統文化特性是應用程式定義域中的預設執行緒文化特性，則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]和舊版中，根據預設，所有執行緒的文化特性設定為 Windows 系統的文化特性。 針對目前文化特性不同於預設系統文化特性的應用程式，通常不需要此行為。 在  [!INCLUDE[net_v45](~/includes/net-v45-md.md)]，則<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>屬性可讓應用程式定義應用程式定義域中的所有執行緒的預設文化特性。  
  
> [!IMPORTANT]
>  如果您未明確設定的文化特性的任何現有的執行緒執行應用程式定義域中，設定<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>屬性也會變更這些執行緒的文化特性。 不過，如果這些執行緒會執行另一個應用程式定義域中，則其文化特性由定義<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>應用程式定義域中的屬性，或如果沒有預設值時，所定義的預設系統文化特性。 因為這個緣故，我們建議您明確地設定您的主應用程式執行緒的文化特性，並不依賴<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>屬性來定義主應用程式執行緒的文化特性。  
  
 除非明確地設定的值<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>屬性是`null`，與預設 Windows 系統的文化特性所定義的應用程式定義域中尚未指派明確文化特性的執行緒文化特性。  
  
 如需文化特性、 執行緒和應用程式定義域的詳細資訊，請參閱 < 文化特性和執行緒 」 和 「 文化特性和應用程式定義域 」 區段中<xref:System.Globalization.CultureInfo>參考頁面。  
  
   
  
## Examples  
 下列範例說明.NET Framework 中定義新的執行緒目前的文化特性的預設行為。 在啟動時，範例會設定目前的文化特性與目前的 UI 文化特性為法文 （法國） 所在的預設系統文化特性已經是法文 （法國） 以外的所有系統上。 如果預設系統文化特性已經是法文 （法國），程式碼就會設定為 英文 （美國） 目前的文化特性與目前的 UI 文化特性。 然後它會呼叫`DisplayRandomNumbers`常式，這會產生三個隨機數字，並將其顯示成貨幣值。 接下來，它會建立新的執行緒，也會執行`DisplayRandomNumbers`常式。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 如範例輸出所示，當系統文化特性是英文 （美國），在電腦上執行範例的主要執行緒使用法文 （法國） 文化特性的格式化慣例其貨幣值的顯示。 不過，因為背景工作執行緒的文化特性衍生自目前的 Windows 系統文化特性，而不是應用程式的目前文化特性，工作執行緒就會顯示其使用英文 （美國） 文化特性的格式化慣例的貨幣值。  
  
 下列範例會使用<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>和<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>來定義新的應用程式執行緒的目前 UI 文化特性與目前的文化特性的屬性。 在啟動時，範例會設定目前的文化特性與目前的 UI 文化特性為法文 （法國） 所在的預設系統文化特性已經是法文 （法國） 以外的所有系統上。 如果預設系統文化特性已經是法文 （法國），會將目前的文化特性與目前的 UI 文化特性設為 英文 （美國）。 然後它會呼叫`DisplayRandomNumbers`常式，這會產生三個隨機數字，並將其顯示成貨幣值。 接下來，它會建立新的執行緒，也會執行`DisplayRandomNumbers`常式。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 如範例輸出所示，當系統文化特性是英文 （美國），在電腦上執行範例的主執行緒和背景工作執行緒會顯示其使用法文 （法國） 文化特性的格式化慣例的貨幣值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目前應用程式定義域中之執行緒的預設 UI 文化特性。</summary>
        <value>在目前的應用程式定義域中為執行緒的預設 UI 文化特性，若目前的系統 UI 文化特性是應用程式定義域中的預設執行緒 UI 文化特性，則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]和舊版中，根據預設，所有執行緒 UI 文化特性設定為 Windows 系統的文化特性。 針對目前 UI 文化特性不同於預設系統文化特性的應用程式，通常不需要此行為。 在  [!INCLUDE[net_v45](~/includes/net-v45-md.md)]，則<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>屬性可讓您定義應用程式定義域中的所有執行緒的預設 UI 文化特性。  
  
> [!IMPORTANT]
>  如果您未明確設定 UI 文化特性的任何現有的執行緒執行應用程式定義域中，設定<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>屬性也會變更這些執行緒的文化特性。 不過，如果這些執行緒會執行另一個應用程式定義域中，則其文化特性由定義<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>應用程式定義域中的屬性，或如果沒有預設值時，所定義的預設系統文化特性。 因為這個緣故，我們建議您一律可明確地設定您的主應用程式執行緒的文化特性並不依賴<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>屬性來定義主應用程式執行緒的文化特性。  
  
 除非明確地設定的值<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>屬性是`null`，而目前的文化特性的應用程式定義域中尚未指派明確文化特性的所有執行緒的預設 Windows 系統的文化特性定義。  
  
 如需文化特性、 執行緒和應用程式定義域的詳細資訊，請參閱 < 文化特性和執行緒 」 和 「 文化特性和應用程式定義域 」 區段中<xref:System.Globalization.CultureInfo>參考頁面。  
  
   
  
## Examples  
 下列範例說明.NET Framework 中定義新的執行緒目前的文化特性的預設行為。 它會使用英文和俄文語言資源。 名為 GreetingStrings.txt 下列文字檔包含英文語言資源：  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 它會編譯成二進位.resources 檔案，使用名為 GreetingStrings.resources[資源檔產生器](~/docs/framework/tools/resgen-exe-resource-file-generator.md)使用下列命令。  
  
```console  
resgen greetingstrings.txt  
```  
  
 下列文字檔命名為 GreetingStrings.ru RU.txt 包含俄文語言資源：  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 它會編譯成二進位.resources 檔案，使用名為 GreetingStrings.ru RU.resources[資源檔產生器](~/docs/framework/tools/resgen-exe-resource-file-generator.md)使用下列命令。  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 應用程式程式碼，如下所示，位於名為 example1.vb 的檔案中] 或 [Example1.cs 檔案中。 使用下列命令，Visual Basic 編譯器編譯的可執行檔：  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 對於 C# 編譯器，此命令會類似：  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 這會建立組件，其中包含的範例可執行程式碼，以及其後援文化特性的資源。 您也可以使用[組件連結器](~/docs/framework/tools/al-exe-assembly-linker.md)建立俄文 （俄羅斯） 文化特性的資源檔，使用下列命令：  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 在啟動時，範例目前文化特性和設定目前 UI 文化特性為俄文 （俄羅斯） 上所有系統以外的預設系統文化特性是已經俄文 （俄羅斯）。 如果預設系統文化特性已經俄文 （俄羅斯），程式碼會將目前的文化特性與目前 UI 文化特性以英文 （美國）。 然後它會呼叫`ShowGreeting`常式，後續的方法呼叫，顯示一個簡單的字串第一次呼叫和稍微不同的字串。 接下來，它會建立新的執行緒，也會執行`ShowGreeting`常式。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 如範例輸出所示，當系統文化特性是英文 （美國），在電腦上執行範例的主執行緒會顯示其初始字串在以俄文。 不過，因為背景工作執行緒的文化特性衍生自目前的 Windows 系統文化特性，而不是應用程式的目前文化特性，背景工作執行緒會以英文顯示它的字串。  
  
 下列範例會使用<xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A>和<xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>來定義新的應用程式執行緒的目前 UI 文化特性與目前的文化特性的屬性。  
  
 此範例會使用相同的資源檔案，在上一個範例所示。 編譯，並將當地語系化的俄文語言資源內嵌到附屬組件的命令也會相同，不同之處在於可執行組件的名稱會變更。  
  
 在啟動時，範例目前文化特性和設定目前 UI 文化特性為俄文 （俄羅斯） 上所有系統以外的預設系統文化特性是已經俄文 （俄羅斯）。 如果預設系統文化特性已經俄文 （俄羅斯），它會設定目前的文化特性與目前的 UI 文化特性設為 英文 （美國）。 然後它會呼叫`ShowGreeting`常式，後續的方法呼叫，顯示一個簡單的字串第一次呼叫和稍微不同的字串。 接下來，它會建立新的執行緒，也會執行`ShowGreeting`常式。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 如範例輸出所示，當系統文化特性是英文 （美國），在電腦上執行範例的主執行緒和背景工作執行緒及其字串俄文語言顯示。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定作業中，<see cref="P:System.Globalization.CultureInfo.Name" /> 屬性值無效。</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Globalization.CultureInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得完整當地語系化文化特性名稱。</summary>
        <value>完整當地語系化文化特性名稱，格式*languagefull* [*country/regionfull*]，其中*languagefull*是語言的完整名稱和*country/regionfull*是國家/地區的完整名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性表示的當地語系化的名稱<xref:System.Globalization.CultureInfo>物件。  
  
 文化特性名稱可能會因指令碼，或格式設定慣例。 您應該使用的顯示中，傳回的名稱，並不會嘗試剖析它。  
  
 如果藉由建立自訂的文化特性<xref:System.Globalization.CultureAndRegionInfoBuilder>類別，<xref:System.Globalization.CultureInfo.DisplayName%2A>屬性會初始化為值<xref:System.Globalization.CultureInfo.NativeName%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例顯示中性文化特性的數個屬性。  
  
> [!NOTE]
>  此範例會顯示兩分別是 0x0004 和 0x7C04 的文化特性識別項，與 ZH-CHS 和 ZH-CHT 文化特性。 不過，您的 Windows Vista 應用程式應該使用-Zh-hans 名稱，而不是 ZH-CHS 和 Zh-hant 名稱，而不是 ZH-CHT。 -Zh-hans 與 Zh-hant 名稱代表目前標準，而且應該使用，除非您有使用較舊名稱的原因。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnglishName : string" Usage="System.Globalization.CultureInfo.EnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得格式為 *languagefull* [*country/regionfull*] 的英文文化特性名稱。</summary>
        <value>格式的文化特性名稱*languagefull* [*country/regionfull*]，其中*languagefull*是語言的完整名稱和*國家 （地區) /regionfull*是國家/地區的完整名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 比方說，<xref:System.Globalization.CultureInfo.EnglishName%2A>特定文化特性名稱 EN-US 是 「 英文 （美國） 」。  
  
 這個屬性的值是相同，不論哪個版本的.NET framework 的語言。  
  
   
  
## Examples  
 下列程式碼範例顯示中性文化特性的數個屬性。  
  
> [!NOTE]
>  這個範例顯示舊的 zh-CHS 和 zh-CHT 文化特性名稱，其文化特性識別項分別是 0x0004 和 0x7C04。 不過，您的 Windows Vista 應用程式應該使用-Zh-hans 名稱，而不是 ZH-CHS 和 Zh-hant 名稱，而不是 ZH-CHT。 -Zh-hans 與 Zh-hant 名稱代表目前標準，而且應該使用，除非您有使用較舊名稱的原因。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cultureInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要與目前 <see cref="T:System.Globalization.CultureInfo" /> 比較的物件。</param>
        <summary>判斷指定物件是否與目前 <see cref="T:System.Globalization.CultureInfo" /> 為相同的文化特性。</summary>
        <returns>如果 <paramref name="value" /> 與目前 <see cref="T:System.Globalization.CultureInfo" /> 為相同的文化特性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法覆寫 <xref:System.Object.Equals%2A?displayProperty=nameWithType>。  
  
 兩個<xref:System.Globalization.CultureInfo>物件會被視為相等，如果他們<xref:System.Globalization.CultureInfo.Name%2A>和<xref:System.Globalization.CultureInfo.CompareInfo%2A>屬性相等。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberSignature Language="F#" Value="member this.GetConsoleFallbackUICulture : unit -&gt; System.Globalization.CultureInfo" Usage="cultureInfo.GetConsoleFallbackUICulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在預設的圖形使用者介面 (Graphic User Interface，GUI) 的文化特性不適合主控台應用程式 (Console Application) 時，取得適合的替代使用者介面文化特性。</summary>
        <returns>替代的文化特性，用來在主控台上讀取和顯示文字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 阿拉伯文、 希伯來文、 烏都文和敘利亞文等語言是以雙向文字為基礎。 Windows 應用程式，都有圖形化使用者介面，支援雙向語言。 不過，主控台應用程式，運用作業系統主控台的文字使用者介面，不提供的雙向支援。 因此，如果您將當地語系化為阿拉伯文或希伯來文的主控台應用程式，您的應用程式會顯示無法讀取文字主控台畫面上。  
  
 使用者介面文化特性會指定應用程式所需的資源來支援使用者輸入和輸出，並依預設是作業系統的文化特性相同。 比方說，<xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>屬性會傳回適用於阿拉伯文作業系統的阿拉伯文化特性。 使用<xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A>方法來擷取適用於主控台應用程式使用者介面文化特性。 應用程式擷取後援使用者介面文化特性之後，它應該指派給目前執行緒的目前使用者介面文化特性的文化特性。 如需詳細資訊，請參閱的 < 明確地設定目前 UI 文化特性 」 一節<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>屬性。  
  
 以下是預先定義的文化特性具有不同的後援使用者介面文化特性名稱，從預先定義的文化特性名稱。  
  
|預先定義的文化特性|文化特性名稱|後援使用者介面文化特性名稱|  
|------------------------|------------------|------------------------------------------|  
|阿姆哈拉文|am|en-US|  
|阿姆哈拉文 （衣索比亞）|am-ET|en-US|  
|（中性阿拉伯文）|ar|en-US|  
|阿拉伯文 （阿拉伯聯合大公國）|ar-AE|en-US|  
|阿拉伯文 （巴林）|ar-BH|en-US|  
|阿拉伯文 （阿爾及利亞）|ar-DZ|fr-FR|  
|阿拉伯文 （埃及）|ar-EG|en-US|  
|阿拉伯文 （伊拉克）|ar-IQ|en-US|  
|阿拉伯文 （約旦）|ar-JO|en-US|  
|阿拉伯文 （科威特）|ar-KW|en-US|  
|阿拉伯文 （黎巴嫩）|ar-LB|en-US|  
|阿拉伯文 （利比亞）|ar LY|en-US|  
|阿拉伯文 （摩洛哥）|ar-MA|fr-FR|  
|阿拉伯文 （阿曼）|ar OM|en-US|  
|阿拉伯文 （卡達）|ar-QA|en-US|  
|阿拉伯文 （沙烏地阿拉伯）|ar-SA|en-US|  
|阿拉伯文 （敘利亞）|ar SY|en-US|  
|阿拉伯文 （突尼西亞）|ar-TN|fr-FR|  
|阿拉伯文 （葉門）|ar-YE|en-US|  
|Assamese|as|en-US|  
|阿薩姆文 （印度）|as-IN|en-US|  
|孟加拉文|bn|en-US|  
|孟加拉文 （孟加拉）|bn-BD|en-US|  
|孟加拉文 （印度）|bn IN|en-US|  
|西藏文|bo|en-US|  
|藏文 （中華人民共和國）|bo-CN|en-US|  
|迪維西文|dv|en-US|  
|迪維西文 （印度）|dv-MV|en-US|  
|波斯|fa|en-US|  
|波斯文 （伊朗）|fa-IR|en-US|  
|古吉拉特文|gu|en-US|  
|古吉拉特文 （印度）|gu-IN|en-US|  
|希伯來文|he|en-US|  
|希伯來文 （以色列）|he-IL|en-US|  
|印度文|大家好|en-US|  
|印度文 （印度）|hi-IN|en-US|  
|爨文|ii|en-US|  
|彝文 （中華人民共和國）|ii-CN|en-US|  
|Inukitut 音節|iu-Cans|en-US|  
|Inukitut 音節 （加拿大）|iu-Cans-CA|en-US|  
|高棉文|金鑰管理|en-US|  
|高棉文 （柬埔寨）|km-KH|en-US|  
|坎那達文|kn|en-US|  
|坎那達文 （印度）|kn-IN|en-US|  
|貢根文|kok|en-US|  
|貢根文 （印度）|kok-IN|en-US|  
|寮文|lo|en-US|  
|寮文 （寮國人民共和國）|lo-LA|en-US|  
|馬來亞拉姆文|ml|en-US|  
|馬來亞拉姆文 （印度）|ml-IN|en-US|  
|莫霍克文|moh|en-US|  
|莫霍克文 （加拿大）|moh-CA|en-US|  
|馬拉提文|mr|en-US|  
|馬拉提文 （印度）|mr-IN|en-US|  
|尼泊爾文|ne|en-US|  
|尼泊爾文 （尼泊爾）|ne-NP|en-US|  
|挪威文|否|nb-NO|  
|Odiya|或|en-US|  
|Odiya （印度）|or-IN|en-US|  
|旁遮普文|pa|en-US|  
|旁遮普文 （印度）|pa-IN|en-US|  
|達利|提取要求|en-US|  
|達利語 （阿富汗）|prs-AF|en-US|  
|普什圖文|ps|en-US|  
|普什圖文 （阿富汗）|ps-AF|en-US|  
|梵文|sa|en-US|  
|梵文 （印度）|sa-IN|en-US|  
|僧伽羅文|si|en-US|  
|僧伽羅文 （斯里蘭卡）|si-LK|en-US|  
|敘利亞文|syr|en-US|  
|敘利亞文 （敘利亞）|syr SY|en-US|  
|坦米爾文|ta|en-US|  
|坦米爾文 （印度）|ta-IN|en-US|  
|特拉古文|te|en-US|  
|特拉古文 （印度）|te-IN|en-US|  
|泰文|th|en-US|  
|泰文 （泰國）|個個|en-US|  
|維吾爾文|ug|en-US|  
|維吾爾文 （中國）|ug-CN|en-US|  
|烏都文|您|en-US|  
|烏都文 （巴基斯坦）|ur-PK|en-US|  
|越南文|vi|en-US|  
|越南文 （越南）|vi-VN|en-US|  
  
 您的應用程式可以使用<xref:System.Globalization.CultureAndRegionInfoBuilder>文化特性，以及該文化特性可以有您所選擇的主控台後援文化特性建立替代項目。  
  
   
  
## Examples  
 下列程式碼範例顯示後援使用者介面文化特性與文化特性物件建立關聯。  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>擷取文化特性的快取、唯讀執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">地區設定識別項 (LCID)。</param>
        <summary>使用指定的文化特性識別項，擷取已快取的唯讀文化特性執行個體。</summary>
        <returns>唯讀 <see cref="T:System.Globalization.CultureInfo" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 我們建議您使用這個方法的字串多載 (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>)，因為應該使用地區設定名稱，而不是 Lcid。 自訂地區設定，地區設定名稱是必要的。  
  
 如果`culture`是目前的文化特性，傳回的地區設定識別碼<xref:System.Globalization.CultureInfo>物件不會反映任何使用者覆寫。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> 小於零。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> 指定不支援的文化特性 (Culture)。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]及更早版本會擲回<see cref="T:System.ArgumentException" />如果<paramref name="culture" />不是有效的文化特性識別項。 開頭[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，此方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />。 開始執行的應用程式[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]或更新版本在 Windows 7 或更新版本中，這個方法會嘗試擷取<see cref="T:System.Globalization.CultureInfo" />物件，其識別碼為<paramref name="culture" />從作業系統; 如果作業系統不支援該文化特性，方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">文化特性的名稱。 <paramref name="name" /> 不區分大小寫。</param>
        <summary>使用指定的文化特性名稱，擷取已快取的唯讀文化特性執行個體。</summary>
        <returns>唯讀 <see cref="T:System.Globalization.CultureInfo" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需預先定義的文化特性名稱的清單，請參閱 <<c0> [ 國家語言支援 (NLS) API 參考](https://go.microsoft.com/fwlink/?LinkId=200048)在 Go Global Developer Center。 此外，從 Windows 10，開始`name`可以是任何有效的 BCP-47 語言標記。  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A>方法會擷取快取，唯讀<xref:System.Globalization.CultureInfo>物件。 它提供更佳的效能比對應呼叫<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType>建構函式。  
  
 如果`name`是目前的文化特性，傳回名稱<xref:System.Globalization.CultureInfo>物件不會反映任何使用者覆寫。 這會讓方法適用於伺服器應用程式或工具，並沒有真正的使用者帳戶，在系統上，且需要有效率地載入多個文化特性。  
  
 如果`name`是<xref:System.String.Empty?displayProperty=nameWithType>，此方法會傳回的文化特性而異。 這相當於擷取的值<xref:System.Globalization.CultureInfo.InvariantCulture%2A>屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 為 null。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> 指定不支援的文化特性 (Culture)。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]及更早版本會擲回<see cref="T:System.ArgumentException" />如果<paramref name="name" />不是有效的文化特性名稱。 開頭[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，此方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />。 開始執行的應用程式[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]或更新版本在 Windows 7 或更新版本中，這個方法會嘗試擷取<see cref="T:System.Globalization.CultureInfo" />物件，其識別碼為<paramref name="name" />從作業系統中; 如果作業系統不支援該文化特性，而且<paramref name="name" />不是補充或取代文化特性名稱，則方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string * string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo (name, altName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="altName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">文化特性的名稱。 <paramref name="name" /> 不區分大小寫。</param>
        <param name="altName">文化特性的名稱，這個文化特性提供 <see cref="T:System.Globalization.TextInfo" /> 和 <see cref="T:System.Globalization.CompareInfo" /> 物件，而這些物件是用來初始化 <paramref name="name" />。 <paramref name="altName" /> 不區分大小寫。</param>
        <summary>擷取文化特性的快取、唯讀執行個體。 這些參數會指定文化特性，這個文化特性使用另一個文化特性所指定的 <see cref="T:System.Globalization.TextInfo" /> 和 <see cref="T:System.Globalization.CompareInfo" /> 物件來初始化。</summary>
        <returns>唯讀 <see cref="T:System.Globalization.CultureInfo" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需預先定義的文化特性名稱的清單，請參閱 <<c0> [ 國家語言支援 (NLS) API 參考](https://go.microsoft.com/fwlink/?LinkId=200048)在 Go Global Developer Center。 此外，從 Windows 10，開始`name`可以是任何有效的 BCP-47 語言標記。  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A>方法會取得快取，唯讀<xref:System.Globalization.CultureInfo>物件。 它提供更佳的效能比對應呼叫<xref:System.Globalization.CultureInfo.%23ctor%2A>建構函式。 方法用來建立類似於指定的文化特性`name`參數，但是具有不同的排序和大小寫規則。  
  
 如果`name`或`altName`名稱目前的文化特性，傳回的物件不會反映任何使用者覆寫。 如果`name`是<xref:System.String.Empty?displayProperty=nameWithType>，此方法會傳回的文化特性而異。 這相當於擷取的值<xref:System.Globalization.CultureInfo.InvariantCulture%2A>屬性。 如果`altName`是<xref:System.String.Empty?displayProperty=nameWithType>，此方法會使用的書寫系統和比較規則而異的文化特性所指定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 或 <paramref name="altName" /> 為 null。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> 或 <paramref name="altName" /> 指定不支援的文化特性 (Culture)。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]及更早版本會擲回<see cref="T:System.ArgumentException" />如果<paramref name="name" />或<paramref name="altName" />不是有效的文化特性名稱。 開頭[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，此方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />。 開始執行的應用程式[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]或更新版本在 Windows 7 或更新版本中，這個方法會嘗試擷取<see cref="T:System.Globalization.CultureInfo" />物件，其識別碼為<paramref name="name" />從作業系統中; 如果作業系統不支援該文化特性，而且<paramref name="name" />不是補充或取代文化特性名稱，則方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />例外狀況。 開始執行的應用程式[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]或更新版本在 Windows 7 或更新版本中，這個方法會嘗試擷取<see cref="T:System.Globalization.CultureInfo" />物件，其識別碼為<paramref name="name" />從作業系統中; 如果作業系統不支援該文化特性，而且<paramref name="name" />不是補充或取代文化特性名稱，則方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />例外狀況。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfoByIetfLanguageTag : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">透過 RFC 4646 標準指定的語言名稱。</param>
        <summary>已取代。 擷取唯讀的 <see cref="T:System.Globalization.CultureInfo" /> 物件，其語言特性是透過指定的 RFC 4646 語言標籤所辨識。</summary>
        <returns>唯讀 <see cref="T:System.Globalization.CultureInfo" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  這個方法和<xref:System.Globalization.CultureInfo.IetfLanguageTag%2A>屬性已被取代。 而不是使用這些項目，應用程式應該使用新<xref:System.Globalization.CultureInfo>物件和呼叫<xref:System.Globalization.CultureInfo.Name%2A>屬性。 IETF 標籤和名稱完全相同。  
  
 會維護由 Internet Engineering Task Force (IETF) 的 RFC 4646 標準定義 IETF 語言標記，可統一來識別語言。 IETF 語言標記的格式是所傳回的文化特性名稱相同<xref:System.Globalization.CultureInfo.Name%2A>屬性，但不會唯一識別文化特性。 如果這些文化特性具有相同的語言特性，不同的文化特性會共用相同的 IETF 語言標記。 中所包含的文化特性的語言特性<xref:System.Globalization.TextInfo>相關聯的物件<xref:System.Globalization.CultureInfo>物件。  
  
 IETF 語言標記是由必要的語言識別項、 選擇性的指令碼識別項和選擇性區域識別項所組成。  
  
 您的應用程式應該使用擷取的文化特性，來控制語言特定的工作，例如管理拼字或文法檢查工具。 應用程式不應使用擷取的文化特性，來控制特定文化特性的工作，例如排序文字或格式化時間和日期。  
  
 如需詳細資訊，請參閱 RFC 4646、"標記的識別語言 」 和最新草稿標準的草稿-phillips-langtags-05.txt，在[ http://go.microsoft.com/fwlink/?LinkId=100231 ](https://go.microsoft.com/fwlink/?LinkId=100231)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 為 null。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> 未對應到支援的文化特性。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]及更早版本會擲回<see cref="T:System.ArgumentException" />如果<paramref name="name" />並未對應到支援的文化特性的名稱。 開頭[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，此方法會擲回<see cref="T:System.Globalization.CultureNotFoundException" />。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberSignature Language="F#" Value="static member GetCultures : System.Globalization.CultureTypes -&gt; System.Globalization.CultureInfo[]" Usage="System.Globalization.CultureInfo.GetCultures types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="types">列舉值的位元 (Bitwise) 組合，這些值可篩選要擷取的文化特性。</param>
        <summary>取得支援的文化特性清單，此清單經過指定的 <see cref="T:System.Globalization.CultureTypes" /> 參數篩選。</summary>
        <returns>包含 <paramref name="types" /> 參數所指定之文化特性的陣列。 文化特性陣列是未排序的。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetCultures%2A>方法最常呼叫`types`參數設定為下列值：  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>它會傳回所有的特定文化特性。  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>它會傳回所有的中性文化特性與文化特性而異。  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>它會傳回所有的中性和特定文化特性、 安裝在 Windows 系統的文化特性和使用者所建立的自訂文化特性。  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>它會傳回所有的自訂文化特性，例如註冊<xref:System.Globalization.CultureAndRegionInfoBuilder>類別。 Windows 10 之前的 Windows 版本中<xref:System.Globalization.CultureTypes.UserCustomCulture>值會套用至所有的使用者定義自訂文化特性。 從 Windows 10 開始，它會套用到系統文化特性，缺少完整文化特性的資料，並沒有唯一本機識別碼所指定<xref:System.Globalization.CultureInfo.LCID%2A>屬性值。 如此一來，如下所示的程式碼會傳回不同的結果時較早版本的 Windows 和 Windows 10 上執行。  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 下列程式碼範例顯示中性文化特性的數個屬性。  
  
> [!NOTE]
>  此範例會顯示兩分別是 0x0004 和 0x7C04 的文化特性識別項，與 ZH-CHS 和 ZH-CHT 文化特性。 不過，您的 Windows Vista 應用程式應該使用-Zh-hans 名稱，而不是 ZH-CHS 和 Zh-hant 名稱，而不是 ZH-CHT。 -Zh-hans 與 Zh-hant 名稱代表目前標準，而且應該使用，除非您有使用較舊名稱的原因。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="types" /> 指定無效的 <see cref="T:System.Globalization.CultureTypes" /> 值組合。</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="cultureInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">要取得其格式化物件的 <see cref="T:System.Type" />。 這個方法只支援 <see cref="T:System.Globalization.NumberFormatInfo" /> 和 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 型別。</param>
        <summary>取得定義如何格式化指定型別的物件。</summary>
        <returns><see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 屬性的值；如果 <paramref name="formatType" /> 是 <see cref="T:System.Globalization.NumberFormatInfo" /> 類別的 <see cref="T:System.Globalization.CultureInfo" /> 物件，則這會是包含目前 <see cref="T:System.Type" /> 的預設數值格式資訊的 <see cref="T:System.Globalization.NumberFormatInfo" />。  
  
-或- 
<see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 屬性的值；如果 <paramref name="formatType" /> 是 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 類別的 <see cref="T:System.Globalization.CultureInfo" /> 物件，則這會是包含目前 <see cref="T:System.Type" /> 的預設日期及時間格式資訊的 <see cref="T:System.Globalization.DateTimeFormatInfo" />。  
  
-或- 
null，如果 <paramref name="formatType" /> 為其他任何物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetFormat%2A> 會實作 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>。  
  
 `NumberFormatInfo` 提供與格式中的方法基底資料型別搭配使用的特定文化特性的數值格式。 `DateTimeFormatInfo` 控制特定文化特性格式化的日期和時間值的方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cultureInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>做為目前 <see cref="T:System.Globalization.CultureInfo" /> 的雜湊函式，適合於雜湊演算法和資料結構 (如雜湊資料表)。</summary>
        <returns>目前 <see cref="T:System.Globalization.CultureInfo" /> 的雜湊碼。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法覆寫 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>。  
  
 這個方法會為兩個物件產生相同雜湊程式碼，這兩個物件根據 <xref:System.Globalization.CultureInfo.Equals%2A> 方法是相等的物件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>已取代。 取得語言的 RFC 4646 標準識別。</summary>
        <value>表示語言的 RFC 4646 標準識別的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  這個屬性和<xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A>方法已被取代。 因此，您應該改用<xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>屬性。 IETF 標籤和名稱完全相同。  
  
 會維護由 Internet Engineering Task Force (IETF) 的 RFC 4646 標準定義 IETF 語言標記，可統一來識別語言。 IETF 語言標記的格式會類似於傳回的文化特性名稱<xref:System.Globalization.CultureInfo.Name%2A>屬性，但不會唯一識別文化特性。 如果這些文化特性具有相同的語言特性，也就是不同的文化特性共用相同的 IETF 語言標記。 中所包含的文化特性的語言特性<xref:System.Globalization.TextInfo>相關聯的物件<xref:System.Globalization.CultureInfo>物件。  
  
 IETF 語言標記是由必要的語言識別項、 選擇性的指令碼識別項和選擇性區域識別項所組成。  
  
 如需詳細資訊，請參閱 < [RFC 5646"識別語言的標記](https://go.microsoft.com/fwlink/?LinkId=230876)。 如需子標記的清單，請參閱 < [IANA 語言子標記登錄](https://go.microsoft.com/fwlink/?LinkId=230877)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstalledUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Globalization.CultureInfo" />，表示作業系統所安裝的文化特性。</summary>
        <value><see cref="T:System.Globalization.CultureInfo" />，表示作業系統所安裝的文化特性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在當地語系化的作業系統，例如日文版的 Windows，這個屬性會傳回作業系統的文化特性。 這個屬性就相當於`GetSystemDefaultUILanguage`Windows API 中。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與文化特性無關的 (不變的) <see cref="T:System.Globalization.CultureInfo" /> 物件。</summary>
        <value>與文化特性無關的 (不變的) 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 而異的文化特性是不區分文化特性;相關聯的英文語言使用，但不是能搭配任何國家/地區。 依名稱指定文化特性而異使用空字串 ("") 的呼叫中<xref:System.Globalization.CultureInfo>具現化方法。 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 也會擷取執行個體的文化特性而異。 幾乎任何方法中用於<xref:System.Globalization>需要文化特性的命名空間。 這類屬性所傳回的物件<xref:System.Globalization.CultureInfo.CompareInfo%2A>， <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>，和<xref:System.Globalization.CultureInfo.NumberFormat%2A>也反映字串比較和格式設定慣例的文化特性而異。  
  
 不同於區分文化特性的資料，也就是有可能變更的使用者自訂或.NET Framework 或作業系統更新，而異的文化特性資料穩定一段時間後跨已安裝的文化特性，並且無法由使用者自訂。 這可讓而異的文化特性特別適用於作業需要文化特性無關的結果，例如格式化和剖析作業保存格式化的資料，或排序及順序要求中，顯示資料的作業不論文化特性的固定的順序。  
  
## <a name="string-operations"></a>字串作業  
 您可以使用文化特性而異的文化特性字串作業，不會受到目前執行緒文化特性的慣例，以及屬於一致跨文化特性。 例如，您可以依照固定順序顯示，或套用一組標準的大小寫慣例，不論目前執行緒文化特性的字串排序的資料。 若要這樣做，您傳遞<xref:System.Globalization.CultureInfo.InvariantCulture%2A>物件的方法有<xref:System.Globalization.CultureInfo>參數，例如<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29>和<xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>。  
  
## <a name="persisting-data"></a>保存資料  
 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>屬性可以用來保存資料的文化特性無關的格式。 這會提供已知的格式，不會變更，並可用來序列化和還原序列化跨文化特性的資料。 將資料還原序列化之後，它可以根據目前使用者的文化特性的慣例，適當地進行格式化。  
  
 比方說，如果您選擇要保存字串形式的日期和時間資料，您可以傳遞<xref:System.Globalization.CultureInfo.InvariantCulture%2A>物件<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>或是<xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法來建立字串，而且您可以傳遞<xref:System.Globalization.CultureInfo.InvariantCulture%2A>物件<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>或<xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>將字串轉換成日期和時間值的方法。 這項技術可確保基礎的日期和時間值不會變更讀取或寫入使用者從不同的文化特性的資料時。  
  
 下列範例會使用區分文化特性來保存<xref:System.DateTime>做為字串的值。 然後它會剖析字串，並顯示其值，使用法文 （法國） 和德文 （德國） 文化特性的格式化慣例。  
  
 [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  
  
## <a name="security-decisions"></a>安全性決策  
 如果您要進行安全性決策 （例如是否要允許系統資源的存取權） 根據字串比較或大小寫變更的結果，您不應該使用文化特性而異。 相反地，您應該執行區分大小寫或不區分大小寫的序數比較，藉由呼叫的方法，包括<xref:System.StringComparison>參數，並提供其中一個<xref:System.StringComparison.Ordinal?displayProperty=nameWithType>或<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>做為引數。 如果目前的文化特性變更，或正在執行的程式碼的電腦上的文化特性不同於用來測試程式碼的文化特性，則會執行區分文化特性字串作業的程式碼可能會造成安全性弱點。 相反地，序數比較取決於比較字元的二進位值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNeutralCulture : bool" Usage="System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出目前 <see cref="T:System.Globalization.CultureInfo" /> 是否表示中性文化特性。</summary>
        <value>如果目前 <see cref="T:System.Globalization.CultureInfo" /> 表示中性文化特性，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中性文化特性是相關聯的文化特性使用的語言，但不是使用國家或地區。 不同於特定的文化特性，也就是同時語言和國家/地區或區域相關聯的文化特性。 例如，fr 是中性法文文化特性名稱，而 FR-FR 是在法國的法文文化特性的名稱。  
  
 如果這個屬性會傳回`false`，文化特性是特定文化特性或文化特性而異。  
  
   
  
## Examples  
 下列程式碼範例會判斷哪些使用簡體中文的語言的文化特性是中性文化特性。  
  
> [!NOTE]
>  這個範例顯示舊的 zh-CHS 和 zh-CHT 文化特性名稱，其文化特性識別項分別是 0x0004 和 0x7C04。 不過，您的 Windows Vista 應用程式應該使用-Zh-hans 名稱，而不是 ZH-CHS 和 Zh-hant 名稱，而不是 ZH-CHT。 -Zh-hans 與 Zh-hant 名稱代表目前標準，而且應該使用，除非您有使用較舊名稱的原因。  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.CultureInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出目前 <see cref="T:System.Globalization.CultureInfo" /> 是否為唯讀。</summary>
        <value>如果目前 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Globalization.CultureInfo" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Globalization.CultureInfo>是唯讀的<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>和<xref:System.Globalization.CultureInfo.NumberFormat%2A>執行個體也都是唯讀。  
  
   
  
## Examples  
 下列程式碼範例顯示<xref:System.Globalization.CultureInfo.IsReadOnly%2A>也可協助保護<xref:System.Globalization.DateTimeFormatInfo>並<xref:System.Globalization.NumberFormatInfo>相關聯的執行個體<xref:System.Globalization.CultureInfo>。  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int" Usage="System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得使用中的輸入地區設定識別項 (Input Locale Identifier)。</summary>
        <value>32 位元帶正負號的數字，指定輸入地區設定識別項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 輸入法地區設定識別碼先前稱為鍵盤配置。 輸入法地區設定識別項是輸入的更廣泛的概念，比起鍵盤配置，因為它也可能表示語音轉換文字轉換器、 輸入法 (IME) 或任何其他形式。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Globalization.CultureInfo" /> 的文化特性識別項。</summary>
        <value>目前 <see cref="T:System.Globalization.CultureInfo" /> 的文化特性識別項。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大部分情況下，文化特性識別項會對應至相對應的 NLS 地區設定識別碼。  
  
 在 Windows 10，地區設定識別碼之前的 Windows 版本中`LOCALE_CUSTOM_UNSPECIFIED`（0x1000 控制或 4096） 指派給使用者所建立的自訂文化特性。 從 Windows 10 開始，它會指派給任何文化特性，並沒有唯一的地區設定識別碼，而且不需要完整的系統提供資料。 如此一來，程式碼會逐一查看的文化特性，擷取具有<xref:System.Globalization.CultureInfo.LCID%2A>的值`LOCALE_CUSTOM_UNSPECIFIED`傳回的較大子集<xref:System.Globalization.CultureInfo>物件如果執行 Windows 10。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立<xref:System.Globalization.CultureInfo>西班牙文 （西班牙） 與國際排序次序，另一個<xref:System.Globalization.CultureInfo>以及傳統的排序順序。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CultureInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得格式為 *languagecode2*-*country/regioncode2* 的文化特性名稱。</summary>
        <value>格式的文化特性名稱*languagecode2*-*country/regioncode2*。 *languagecode2*衍生自 ISO 639-1 的小寫雙字母代碼。 *country/regioncode2*衍生自 ISO 3166，通常是由兩個大寫字母或 BCP-47 語言標記所組成。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需預先定義的文化特性名稱和識別碼的清單，<xref:System.Globalization.CultureInfo.Name%2A>可以傳回屬性，請參閱[國家語言支援 (NLS) API 參考](https://go.microsoft.com/fwlink/?LinkId=200048)在 Go Global Developer Center。 此外，從 Windows 10，開始`name`可以是任何有效的 BCP-47 語言標記。 請注意文化特性名稱是有可能變更，而且它們也可以反映自訂的文化特性名稱。  
  
 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>屬性會遵循中提供的命名標準<xref:System.Globalization.CultureInfo>類別主題。 它會傳回不含任何資訊指出的替代排序次序的文化特性名稱的簡短形式。 例如，如果您具現化<xref:System.Globalization.CultureInfo>物件以反映替代排序次序，使用字串"de DE_phoneb"<xref:System.Globalization.CultureInfo.Name%2A>屬性會傳回"DE-DE"。  
  
 若要取得之文化特性的完整名稱，您應該使用<xref:System.Globalization.CultureInfo.DisplayName%2A>， <xref:System.Globalization.CultureInfo.EnglishName%2A>，或<xref:System.Globalization.CultureInfo.NativeName%2A>屬性。  
  
   
  
## Examples  
 下列程式碼範例顯示中性文化特性的數個屬性。  
  
> [!NOTE]
>  這個範例顯示舊的 zh-CHS 和 zh-CHT 文化特性名稱，其文化特性識別項分別是 0x0004 和 0x7C04。 不過，您的 Windows Vista 應用程式應該使用-Zh-hans 名稱，而不是 ZH-CHS 和 Zh-hant 名稱，而不是 ZH-CHT。 -Zh-hans 與 Zh-hant 名稱代表目前標準，而且應該使用，除非您有使用較舊名稱的原因。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeName : string" Usage="System.Globalization.CultureInfo.NativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得文化特性設定為要顯示的文化特性名稱，由語言、國家/地區和選擇性 (Optional) 指令碼組成。</summary>
        <value>文化特性名稱。 由語言的完整名稱、國家/地區的完整名稱和選擇性字集組成。 這種格式會在 <see cref="T:System.Globalization.CultureInfo" /> 類別的描述中討論。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性的值是相同，不論哪個版本的.NET framework 的語言。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureInfo.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Globalization.NumberFormatInfo" />，定義數字、貨幣和百分比在文化特性上適當的顯示格式。</summary>
        <value><see cref="T:System.Globalization.NumberFormatInfo" />，定義數字、貨幣和百分比在文化特性上適當的顯示格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 使用者可能選擇覆寫一些與目前的文化特性的 Windows [控制台] 的 [地區及語言選項] 部分透過相關聯的值。 比方說，使用者可能會選擇不同的格式顯示日期，或使用文化特性的預設值以外的貨幣。  
  
 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A>已`true`和指定的文化特性相符的 Windows，目前的文化特性<xref:System.Globalization.CultureInfo>會使用這些覆寫，包括使用者設定之屬性的<xref:System.Globalization.DateTimeFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性，和資料庫屬性<xref:System.Globalization.NumberFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>，例如，如果所選行事曆不是其中一個<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>，不會定義方法的結果和屬性的值。  
  
 值<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性和<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性不計算，直到使用者存取的屬性。 如果使用者將目前的文化特性變更為新的文化特性，應用程式執行，然後存取時使用控制台中<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>或<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性，應用程式會擷取新的文化特性的預設值。 不覆寫原始的文化特性。 若要保留原始的目前文化特性的覆寫，應該存取的應用程式<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>和<xref:System.Globalization.CultureInfo.NumberFormat%2A>之前變更目前的文化特性的屬性。  
  
   
  
## Examples  
 下列程式碼範例示範 CultureInfo.Clone 也複製<xref:System.Globalization.DateTimeFormatInfo>並<xref:System.Globalization.NumberFormatInfo>相關聯的執行個體<xref:System.Globalization.CultureInfo>。  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">此屬性設定為 null。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 屬性或任何 <see cref="T:System.Globalization.NumberFormatInfo" /> 屬性已設定，而且 <see cref="T:System.Globalization.CultureInfo" /> 是唯讀的。</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OptionalCalendars : System.Globalization.Calendar[]" Usage="System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得可為文化特性所使用的曆法清單。</summary>
        <value><see cref="T:System.Globalization.Calendar" /> 型別的陣列，表示可為目前 <see cref="T:System.Globalization.CultureInfo" /> 表示之文化特性所使用的曆法。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您的應用程式會變更目前所使用的行事曆<xref:System.Globalization.CultureInfo>藉由設定<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>屬性<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>，這是執行個體<xref:System.Globalization.DateTimeFormatInfo>類別。 新的行事曆必須是其中一項中所列的行事曆<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 也包含 自訂日期和時間格式的相關聯的其他屬性<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範如何判斷<xref:System.Globalization.GregorianCalendar>文化特性所支援的版本。  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Globalization.CultureInfo" />，表示目前 <see cref="T:System.Globalization.CultureInfo" /> 的父文化特性。</summary>
        <value><see cref="T:System.Globalization.CultureInfo" />，表示目前 <see cref="T:System.Globalization.CultureInfo" /> 的父文化特性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文化特性具有階層在其父代之特定文化特性是中性文化特性，是中性文化特性的父代<xref:System.Globalization.CultureInfo.InvariantCulture%2A>，和父代<xref:System.Globalization.CultureInfo.InvariantCulture%2A>是文化本身的特性而異。 父文化特性，涵蓋了只是在其子系之間常見的資訊集。  
  
 如果特定的文化特性的資源不是系統所提供的則會使用中性文化特性的資源。 如果無法使用中性文化特性的資源時，會使用內嵌於主要組件中的資源。 如需有關資源後援處理序的詳細資訊，請參閱 <<c0> [ 封裝和部署資源](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)。  
  
   
  
## Examples  
 下列程式碼範例會判斷每個使用中文語言的特定文化特性的父文化特性。  
  
> [!NOTE]
>  這個範例顯示舊的 zh-CHS 和 zh-CHT 文化特性名稱，其文化特性識別項分別是 0x0004 和 0x7C04。 不過，您的 Windows Vista 應用程式應該使用-Zh-hans 名稱，而不是 ZH-CHS 和 Zh-hant 名稱，而不是 ZH-CHT。 -Zh-hans 與 Zh-hant 名稱代表目前標準，而且應該使用，除非您有使用較舊名稱的原因。  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.CultureInfo -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.ReadOnly ci" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">要包裝的 <see cref="T:System.Globalization.CultureInfo" /> 物件。</param>
        <summary>傳回指定 <see cref="T:System.Globalization.CultureInfo" /> 物件的唯讀包裝函式。</summary>
        <returns><paramref name="ci" /> 的唯讀 <see cref="T:System.Globalization.CultureInfo" /> 包裝函式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個包裝函式可防止修改`ci`，或所傳回的物件`ci`。<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 和`ci`。<xref:System.Globalization.CultureInfo.NumberFormat%2A> 屬性。  
  
   
  
## Examples  
 下列範例顯示<xref:System.Globalization.CultureInfo.ReadOnly%2A>方法可協助保護<xref:System.Globalization.DateTimeFormatInfo>並<xref:System.Globalization.NumberFormatInfo>相關聯的執行個體<xref:System.Globalization.CultureInfo>。  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ci" /> 為 null。</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo" Usage="System.Globalization.CultureInfo.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Globalization.TextInfo" />，定義與文化特性相關的書寫系統。</summary>
        <value><see cref="T:System.Globalization.TextInfo" />，定義與文化特性相關的書寫系統。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.TextInfo%2A>屬性會提供特定文化特性的大小寫字串的資訊。 若要執行不區分文化特性的大小寫，應該使用應用程式<xref:System.Globalization.CultureInfo.TextInfo%2A>屬性<xref:System.Globalization.CultureInfo.InvariantCulture%2A>。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立<xref:System.Globalization.CultureInfo>西班牙文 （西班牙） 與國際排序次序，另一個<xref:System.Globalization.CultureInfo>以及傳統的排序順序。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Globalization.CultureInfo" /> 的語言的 ISO 639-2 三個字母代碼。</summary>
        <value>目前 <see cref="T:System.Globalization.CultureInfo" /> 的語言的 ISO 639-2 三個字母代碼。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例如，適用於英文的三個字母縮寫為"eng"。  
  
> [!NOTE]
>  當之間進行通訊的處理，或保存資料，通常最好是使用完整<xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>。 使用只包含語言可能會遺失內容和資料。  
  
   
  
## Examples  
 下列程式碼範例顯示中性文化特性的數個屬性。  
  
> [!NOTE]
>  這個範例顯示舊的 zh-CHS 和 zh-CHT 文化特性名稱，其文化特性識別項分別是 0x0004 和 0x7C04。 不過，您的 Windows Vista 應用程式應該使用-Zh-hans 名稱，而不是 ZH-CHS 和 Zh-hant 名稱，而不是 ZH-CHT。 -Zh-hans 與 Zh-hant 名稱代表目前標準，而且應該使用，除非您有使用較舊名稱的原因。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得該語言在 Windows API 定義中的三個字母代碼。</summary>
        <value>Windows API 中所定義的語言的三個字母代碼。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會傳回相同的值做為 Windows API 方法`GetLocaleInfo`LOCALE_SABBREVLANGNAME 值。 例如，英文 （美國） Windows API 中所定義的三個字母代碼為"enu"。  
  
> [!NOTE]
>  當之間進行通訊的處理，或保存資料，通常最好是使用完整<xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>。 使用只包含語言可能會遺失內容和資料。  
  
   
  
## Examples  
 下列程式碼範例顯示中性文化特性的數個屬性。  
  
> [!NOTE]
>  這個範例顯示舊的 zh-CHS 和 zh-CHT 文化特性名稱，其文化特性識別項分別是 0x0004 和 0x7C04。 不過，您的 Windows Vista 應用程式應該使用-Zh-hans 名稱，而不是 ZH-CHS 和 Zh-hant 名稱，而不是 ZH-CHT。 -Zh-hans 與 Zh-hant 名稱代表目前標準，而且應該使用，除非您有使用較舊名稱的原因。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="cultureInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回包含目前 <see cref="T:System.Globalization.CultureInfo" /> 名稱的字串，其格式為 *languagecode2*-*country/regioncode2*。</summary>
        <returns>包含目前 <see cref="T:System.Globalization.CultureInfo" /> 名稱的字串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法覆寫 <xref:System.Object.ToString%2A?displayProperty=nameWithType>。 它會傳回一個正規化的版本的文化特性名稱傳遞給<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>或是<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>建構函式，或者<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>或<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>方法。 它將結果字串正規化轉換中的字元*languagecode2*小寫和轉換的字元，在*country/regioncode2*為大寫，如有必要。  
  
 預先定義的文化特性名稱所示[國家語言支援 (NLS) API 參考](https://go.microsoft.com/fwlink/?LinkId=200048)Go Global Developer Center 頁面。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Globalization.CultureInfo" /> 的語言的 ISO 639-1 兩個字母代碼。</summary>
        <value>目前 <see cref="T:System.Globalization.CultureInfo" /> 的語言的 ISO 639-1 兩個字母代碼。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例如，英文版的兩個字母縮寫是"en"。 <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A>而異的文化特性的屬性值為"iv"。  
  
> [!NOTE]
>  當之間進行通訊的處理，或保存資料，通常最好是使用完整<xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>。 使用只包含語言可能會遺失內容和資料。  
  
 如果 ISO 639-1 未定義特定文化特性，兩個字母的語言代碼<xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A>屬性會傳回三個或多個字母所組成的字串。 如需詳細資訊，請參閱範例。  
  
   
  
## Examples  
 下列範例會列出之文化特性其<xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A>屬性不是組成的兩個字母的語言代碼。  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseUserOverride : bool" Usage="System.Globalization.CultureInfo.UseUserOverride" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出目前 <see cref="T:System.Globalization.CultureInfo" /> 是否使用使用者選取的文化特性設定。</summary>
        <value>如果目前 <see cref="T:System.Globalization.CultureInfo" /> 使用使用者選取的文化特性設定，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用者可能選擇覆寫一些與目前的文化特性的 Windows [控制台] 的 [地區及語言選項] 部分透過相關聯的值。 比方說，使用者可能會選擇不同的格式顯示日期，或使用文化特性的預設值以外的貨幣。  
  
 如果<xref:System.Globalization.CultureInfo.UseUserOverride%2A>已`true`和指定的文化特性相符的 Windows，目前的文化特性<xref:System.Globalization.CultureInfo>會使用這些覆寫，包括使用者設定之屬性的<xref:System.Globalization.DateTimeFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>屬性，和資料庫屬性<xref:System.Globalization.NumberFormatInfo>所傳回的執行個體<xref:System.Globalization.CultureInfo.NumberFormat%2A>屬性。 如果使用者設定都與相關聯的文化特性不相容<xref:System.Globalization.CultureInfo>，例如，如果所選行事曆不是其中一個<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>，不會定義方法的結果和屬性的值。  
  
 這個屬性時，會設定<xref:System.Globalization.CultureInfo>建立。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>